zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: 1726a90674da432b878ef9742568d1d7
      name: 'by d.bogach/Мониторинг Windows'
  templates:
    - uuid: 0201378d0e79464bae66080f3868b272
      template: 'Windows laptop by WMI'
      name: 'WIndows ноутбук'
      groups:
        - name: 'by d.bogach/Мониторинг Windows'
      items:
        - uuid: d68e34e05c634b0c93bae8682b18c3d6
          name: 'Host name of Zabbix agent running'
          key: agent.hostname
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: system
        - uuid: 3910ac5a24404896a5746d2126321318
          name: 'Version of Zabbix agent running'
          key: agent.version
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: application
        - uuid: f476157c35084e478d4075ecb490100b
          name: 'Модель аккумулятора'
          type: DEPENDENT
          key: battery_name
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Name
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_Battery"]'
        - uuid: 1b20019bfb6449b18723204fb7d0ccbe
          name: 'Статус батареи'
          type: DEPENDENT
          key: battery_status
          delay: '0'
          history: 1w
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..BatteryStatus
            - type: TRIM
              parameters:
                - '[]"'
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_Battery"]'
        - uuid: bdda70b12b4b4b6d9510cf5dec36501c
          name: 'BIOS: подпись'
          type: DEPENDENT
          key: bios_caption
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Caption
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: ee4ae627d2854d05ae1494ca3378b44a
          name: 'BIOS: характеристики'
          type: DEPENDENT
          key: bios_characteristics
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          description: |
            Reserved (0)
            Reserved (1)
            Unknown (2)
            BIOS Characteristics Not Supported (3)
            ISA is supported (4)
            MCA is supported (5)
            EISA is supported (6)
            PCI is supported (7)
            PC Card (PCMCIA) is supported (8)
            Plug and Play is supported (9)
            APM is supported (10)
            BIOS is Upgradeable (Flash) (11)
            BIOS is Upgradable (Flash)
            BIOS shadowing is allowed (12)
            VL-VESA is supported (13)
            ESCD support is available (14)
            Boot from CD is supported (15)
            Selectable Boot is supported (16)
            BIOS ROM is socketed (17)
            Boot From PC Card (PCMCIA) is supported (18)
            EDD (Enhanced Disk Drive) Specification is supported (19)
            Int 13h - Japanese Floppy for NEC 9800 1.2mb (3.5\", 1k Bytes/Sector, 360 RPM) is supported (20)
            Int 13h - Japanese Floppy for NEC 9800 1.2mb (3.5, 1k Bytes/Sector, 360 RPM) is supported
            Int 13h - Japanese Floppy for Toshiba 1.2mb (3.5\", 360 RPM) is supported (21)
            Int 13h - Japanese Floppy for Toshiba 1.2mb (3.5, 360 RPM) is supported
            Int 13h - 5.25\" / 360 KB Floppy Services are supported (22)
            Int 13h - 5.25 / 360 KB Floppy Services are supported
            Int 13h - 5.25\" /1.2MB Floppy Services are supported (23)
            Int 13h - 5.25 /1.2MB Floppy Services are supported
            Int 13h - 3.5\" / 720 KB Floppy Services are supported (24)
            Int 13h - 3.5 / 720 KB Floppy Services are supported
            Int 13h - 3.5\" / 2.88 MB Floppy Services are supported (25)
            Int 13h - 3.5 / 2.88 MB Floppy Services are supported
            Int 5h, Print Screen Service is supported (26)
            Int 9h, 8042 Keyboard services are supported (27)
            Int 14h, Serial Services are supported (28)
            Int 17h, printer services are supported (29)
            Int 10h, CGA/Mono Video Services are supported (30)
            NEC PC-98 (31)
            ACPI supported (32)
            ACPI is supported
            USB Legacy is supported (33)
            AGP is supported (34)
            I2O boot is supported (35)
            LS-120 boot is supported (36)
            ATAPI ZIP Drive boot is supported (37)
            1394 boot is supported (38)
            Smart Battery supported (39)
            Smart Battery is supported
            40 47
            Reserved for BIOS vendor
            48 63
            Reserved for system vendor
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..BiosCharacteristics
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: f353eab8687948518c327d2caabba7ac
          name: 'BIOS: текущий язык'
          type: DEPENDENT
          key: bios_current_language
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..CurrentLanguage
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: f1d0c02ee394429f884015552794ecdb
          name: 'BIOS: описание'
          type: DEPENDENT
          key: bios_description
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Description
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: b6161192890546ce8f6ad607ea725dbf
          name: 'BIOS: список поддерживаемых языков'
          type: DEPENDENT
          key: bios_list_of_languages
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..ListOfLanguages
            - type: TRIM
              parameters:
                - '[]'
            - type: STR_REPLACE
              parameters:
                - '"'
                - ''
            - type: STR_REPLACE
              parameters:
                - ','
                - ', '
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: fdb78a75711c4608a3525ba8c6d29e69
          name: 'BIOS: производитель'
          type: DEPENDENT
          key: bios_manufacturer
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Manufacturer
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 9a2ba4ad7df74eb18680051abec7b6f9
          name: 'BIOS: имя'
          type: DEPENDENT
          key: bios_name
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Name
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: ed91237ce6804b0fbd9aef3771e696e3
          name: 'BIOS: основной BIOS'
          type: DEPENDENT
          key: bios_primary
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..PrimaryBIOS
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 92d81b1ef91b4b2481e7ab284d0ba7db
          name: 'BIOS: дата релиза'
          type: DEPENDENT
          key: bios_release_date
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..ReleaseDate
            - type: TRIM
              parameters:
                - '[]"'
            - type: REGEX
              parameters:
                - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                - '\3.\2.\1 \4:\5:\6'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 1fd9f17b90944a0e88ebb1b26a24cf24
          name: 'BIOS: серийный номер'
          type: DEPENDENT
          key: bios_serial_number
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..SerialNumber
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: dc6ebe7a9315441881f523c36f7cabea
          name: 'BIOS: статус программного элемента'
          type: DEPENDENT
          key: bios_software_element_state
          delay: '0'
          history: 1d
          trends: '0'
          status: DISABLED
          description: |
            Deployable (0)
            Installable (1)
            Executable (2)
            Running (3)
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..SoftwareElementState
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: a245de6179ff40edb3fb2d0e7628d920
          name: 'BIOS: статус'
          type: DEPENDENT
          key: bios_status
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          description: |
            OK ("OK")
            Error ("Error")
            Degraded ("Degraded")
            Unknown ("Unknown")
            Pred Fail ("Pred Fail")
            Starting ("Starting")
            Stopping ("Stopping")
            Service ("Service")
            Stressed ("Stressed")
            NonRecover ("NonRecover")
            No Contact ("No Contact")
            Lost Comm ("Lost Comm")
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Status
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 65e256f61acd4023bf6241edb28e1027
          name: 'BIOS: целевая ОС'
          type: DEPENDENT
          key: bios_target_operating_system
          delay: '0'
          history: 1d
          trends: '0'
          status: DISABLED
          description: |
            Unknown (0)
            Other (1)
            MACOS (2)
            ATTUNIX (3)
            DGUX (4)
            DECNT (5)
            Digital Unix (6)
            OpenVMS (7)
            HPUX (8)
            AIX (9)
            MVS (10)
            OS400 (11)
            OS/2 (12)
            JavaVM (13)
            MSDOS (14)
            WIN3x (15)
            WIN95 (16)
            WIN98 (17)
            WINNT (18)
            WINCE (19)
            NCR3000 (20)
            NetWare (21)
            OSF (22)
            DC/OS (23)
            Reliant UNIX (24)
            SCO UnixWare (25)
            SCO OpenServer (26)
            Sequent (27)
            IRIX (28)
            Solaris (29)
            SunOS (30)
            U6000 (31)
            ASERIES (32)
            TandemNSK (33)
            TandemNT (34)
            BS2000 (35)
            LINUX (36)
            Lynx (37)
            XENIX (38)
            VM/ESA (39)
            Interactive UNIX (40)
            BSDUNIX (41)
            FreeBSD (42)
            NetBSD (43)
            GNU Hurd (44)
            OS9 (45)
            MACH Kernel (46)
            Inferno (47)
            QNX (48)
            EPOC (49)
            IxWorks (50)
            VxWorks (51)
            MiNT (52)
            BeOS (53)
            HP MPE (54)
            NextStep (55)
            PalmPilot (56)
            Rhapsody (57)
            Windows 2000 (58)
            Dedicated (59)
            VSE (60)
            TPF (61)
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..TargetOperatingSystem
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: f286911f3b5f43a7ace9e2078dd48302
          name: 'BIOS: версия'
          type: DEPENDENT
          key: bios_version
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Version
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: abe698e5f7b54afd91823d32ce329ba8
          name: 'BIOS: полная версия'
          type: DEPENDENT
          key: bios_version_all
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..BIOSVersion
            - type: TRIM
              parameters:
                - '[]'
            - type: STR_REPLACE
              parameters:
                - '"'
                - ''
            - type: STR_REPLACE
              parameters:
                - ','
                - ', '
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 09f5bafd9d1549ca80cd786bc6b4a3fc
          name: 'Номинальное напряжение на батарее'
          type: DEPENDENT
          key: design_voltage
          delay: '0'
          history: 1w
          value_type: FLOAT
          trends: '0'
          units: V
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..DesignVoltage
            - type: TRIM
              parameters:
                - '[]"'
            - type: MULTIPLIER
              parameters:
                - '0.001'
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_Battery"]'
        - uuid: d9b9ff90269b44188d6342bf03c169c6
          name: 'Заряд батареи'
          type: DEPENDENT
          key: estimated_charge_remaining
          delay: '0'
          history: 1w
          trends: '0'
          units: '%'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..EstimatedChargeRemaining
            - type: TRIM
              parameters:
                - '[]"'
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_Battery"]'
        - uuid: 30f1ad1243a44952a94e74c947e7c36f
          name: 'Расчётное время работы от батареи'
          type: DEPENDENT
          key: estimated_run_time
          delay: '0'
          history: 1w
          trends: '0'
          units: uptime
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..EstimatedRunTime
            - type: TRIM
              parameters:
                - '[]"'
            - type: MULTIPLIER
              parameters:
                - '60'
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_Battery"]'
        - uuid: c3f4b444caf14c10a9a86772147ea60d
          name: 'Доступность ICMP'
          type: SIMPLE
          key: icmpping
          history: 1w
          trends: 30d
          triggers:
            - uuid: 89ebf51a64e244a8a25629566d679499
              expression: 'max(/Windows laptop by WMI/icmpping,#3)=0'
              name: 'Компьютер выключен'
        - uuid: c2f4206eb18549218675b256ce698d75
          name: 'ОС Windows'
          type: DEPENDENT
          key: os_caption
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Caption
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: f21b0f868b4a4721a9f2b7460839da98
          name: 'ОС Windows: дата установки'
          type: DEPENDENT
          key: os_install_date
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..InstallDate
            - type: TRIM
              parameters:
                - '[]"'
            - type: REGEX
              parameters:
                - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                - '\3.\2.\1 \4:\5:\6'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 01f13cfafe7a4d7ca994b9aa7c3f8d16
          name: 'ОС Windows: дата последнего запуска'
          type: DEPENDENT
          key: os_last_boot_time
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..LastBootUpTime
            - type: TRIM
              parameters:
                - '[]"'
            - type: REGEX
              parameters:
                - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                - '\3.\2.\1 \4:\5:\6'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: e199651c05cf48a88d74a73cd727e8a8
          name: 'ОС Windows: зарегистрированный пользователь'
          type: DEPENDENT
          key: os_registered_user
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..RegisteredUser
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 1e397c00f2cb485b8b02766b2d7f6f02
          name: 'ОС Windows: серийный номер'
          type: DEPENDENT
          key: os_serial_number
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..SerialNumber
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 739da2eed18543fa81f04dc8f380aa49
          name: 'ОС Windows: статус'
          type: DEPENDENT
          key: os_status
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Status
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 35e8d251f2c741eb95a55f3d230745e7
          name: 'ОС Windows: версия'
          type: DEPENDENT
          key: os_version
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Version
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 8fdce4580f544aeda6944518d1b4f7ec
          name: 'Cache bytes'
          key: 'perf_counter_en["\Memory\Cache Bytes"]'
          history: 7d
          status: DISABLED
          units: B
          description: 'Cache Bytes is the sum of the Memory\\System Cache Resident Bytes, Memory\\System Driver Resident Bytes, Memory\\System Code Resident Bytes, and Memory\\Pool Paged Resident Bytes counters. This counter displays the last observed value only; it is not an average.'
          tags:
            - tag: component
              value: memory
        - uuid: 3ac9133a664f4f708d37cf7adcb41c5c
          name: 'Free system page table entries'
          key: 'perf_counter_en["\Memory\Free System Page Table Entries"]'
          history: 7d
          status: DISABLED
          description: 'This indicates the number of page table entries not currently in use by the system. If the number is less than 5,000, there may be a memory leak or you running out of memory.'
          tags:
            - tag: component
              value: memory
          triggers:
            - uuid: da96168836d1461082dbf183fee51144
              expression: 'max(/Windows laptop by WMI/perf_counter_en["\Memory\Free System Page Table Entries"],5m)<{$MEM.PAGE_TABLE_CRIT.MIN}'
              name: 'Number of free system page table entries is too low'
              event_name: 'Number of free system page table entries is too low (less {$MEM.PAGE_TABLE_CRIT.MIN} for 5m)'
              priority: WARNING
              description: '`Memory\Free System Page Table Entries` has been less than `{$MEM.PAGE_TABLE_CRIT.MIN}` for 5 minutes. If the number is less than 5,000, there may be a memory leak.'
              dependencies:
                - name: 'High memory utilization'
                  expression: 'min(/Windows laptop by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
              tags:
                - tag: scope
                  value: capacity
        - uuid: 6fffbb5a19f9484f9649d3782096f215
          name: 'Memory page faults per second'
          key: 'perf_counter_en["\Memory\Page Faults/sec"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: 'Page Faults/sec is the average number of pages faulted per second. It is measured in number of pages faulted per second because only one page is faulted in each fault operation, hence this is also equal to the number of page fault operations. This counter includes both hard faults (those that require disk access) and soft faults (where the faulted page is found elsewhere in physical memory.) Most processors can handle large numbers of soft faults without significant consequence. However, hard faults, which require disk access, can cause significant delays.'
          tags:
            - tag: component
              value: memory
        - uuid: d9ba2471f7b04cda8ab458624c798c5c
          name: 'Memory pages per second'
          key: 'perf_counter_en["\Memory\Pages/sec"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: |
            This measures the rate at which pages are read from or written to disk to resolve hard page faults.
            If the value is greater than 1,000, as a result of excessive paging, there may be a memory leak.
          tags:
            - tag: component
              value: memory
          triggers:
            - uuid: ee03c0720d24402a950ce03b44457bd0
              expression: 'min(/Windows laptop by WMI/perf_counter_en["\Memory\Pages/sec"],5m)>{$MEM.PAGE_SEC.CRIT.MAX}'
              name: 'The Memory Pages/sec is too high'
              event_name: 'The Memory Pages/sec is too high (over {$MEM.PAGE_SEC.CRIT.MAX} for 5m)'
              priority: WARNING
              description: 'The Memory Pages/sec in the last 5 minutes exceeds `{$MEM.PAGE_SEC.CRIT.MAX}`. If the value is greater than 1,000, as a result of excessive paging, there may be a memory leak.'
              dependencies:
                - name: 'High memory utilization'
                  expression: 'min(/Windows laptop by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
              tags:
                - tag: scope
                  value: capacity
        - uuid: a7b289dd62aa4f20ae4360baa50dd4c1
          name: 'Memory pool non-paged'
          key: 'perf_counter_en["\Memory\Pool Nonpaged Bytes"]'
          history: 7d
          status: DISABLED
          units: B
          description: |
            This measures the size, in bytes, of the non-paged pool. This is an area of system memory for objects that cannot be written to disk but instead must remain in physical memory as long as they are allocated.
            There is a possible memory leak if the value is greater than 175MB (or 100MB with the /3GB switch). Consequently, Event ID 2019 is recorded in the system event log.
          tags:
            - tag: component
              value: memory
        - uuid: ecec79ec399441d29b261e235741ff8d
          name: 'Used swap space in %'
          key: 'perf_counter_en["\Paging file(_Total)\% Usage"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The used space of swap volume/file in percent.'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: 56e2fda5deb048e591fe4a1ca392d280
          name: 'CPU DPC time'
          key: 'perf_counter_en["\Processor Information(_total)\% DPC Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'Processor DPC time is the time that a single processor spent receiving and servicing deferred procedure calls (DPCs). DPCs are interrupts that run at a lower priority than standard interrupts. `% DPC Time` is a component of `% Privileged Time` because DPCs are executed in privileged mode. If a high `% DPC Time` is sustained, there may be a processor bottleneck or an application or hardware related issue that can significantly diminish overall system performance.'
          tags:
            - tag: component
              value: cpu
        - uuid: 801703e55ed4452f8d160d04ee537592
          name: 'CPU interrupt time'
          key: 'perf_counter_en["\Processor Information(_total)\% Interrupt Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The processor information `% Interrupt Time` counter indicates how much time the processor spends handling hardware interrupts during sample intervals. It reflects the activity of devices like the system clock, mouse, disk drivers, and network cards. A value above 20% suggests possible hardware issues.'
          tags:
            - tag: component
              value: cpu
          triggers:
            - uuid: 246b2831e2bd4ae8927ae1addf4ee8a7
              expression: 'min(/Windows laptop by WMI/perf_counter_en["\Processor Information(_total)\% Interrupt Time"],5m)>{$CPU.INTERRUPT.CRIT.MAX}'
              name: 'CPU interrupt time is too high'
              event_name: 'CPU interrupt time is too high (over {$CPU.INTERRUPT.CRIT.MAX}% for 5m)'
              priority: WARNING
              description: 'The CPU Interrupt Time in the last 5 minutes exceeds `{$CPU.INTERRUPT.CRIT.MAX}`%.'
              dependencies:
                - name: 'High CPU utilization'
                  expression: 'min(/Windows laptop by WMI/system.cpu.util,5m)>{$CPU.UTIL.CRIT}'
              tags:
                - tag: scope
                  value: performance
        - uuid: 8e6bb593b4f54aa3b2a1a3140dce3037
          name: 'CPU privileged time'
          key: 'perf_counter_en["\Processor Information(_total)\% Privileged Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The processor information `% Privileged Time` counter shows the percent of time that the processor is spent executing in Kernel (or Privileged) mode. Privileged mode includes services interrupts inside Interrupt Service Routines (ISRs), executing Deferred Procedure Calls (DPCs), Device Driver calls and other kernel-mode functions of the Windows Operating System.'
          tags:
            - tag: component
              value: cpu
          triggers:
            - uuid: 305679b0aa2646caac8a3427d1142ad6
              expression: 'min(/Windows laptop by WMI/perf_counter_en["\Processor Information(_total)\% Privileged Time"],5m)>{$CPU.PRIV.CRIT.MAX}'
              name: 'CPU privileged time is too high'
              event_name: 'CPU privileged time is too high (over {$CPU.PRIV.CRIT.MAX}% for 5m)'
              priority: WARNING
              description: 'The CPU privileged time in the last 5 minutes exceeds {$CPU.PRIV.CRIT.MAX}%.'
              dependencies:
                - name: 'CPU interrupt time is too high'
                  expression: 'min(/Windows laptop by WMI/perf_counter_en["\Processor Information(_total)\% Interrupt Time"],5m)>{$CPU.INTERRUPT.CRIT.MAX}'
                - name: 'High CPU utilization'
                  expression: 'min(/Windows laptop by WMI/system.cpu.util,5m)>{$CPU.UTIL.CRIT}'
              tags:
                - tag: scope
                  value: performance
        - uuid: ca5c95fd7016473ca8db43eeaa598b03
          name: 'CPU user time'
          key: 'perf_counter_en["\Processor Information(_total)\% User Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The processor information `% User Time` counter shows the percent of time that the processor(s) is spent executing in User mode.'
          tags:
            - tag: component
              value: cpu
        - uuid: 1895d0a8993947c283c3b6165ef93f0c
          name: 'Context switches per second'
          key: 'perf_counter_en["\System\Context Switches/sec"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: |
            Context Switches/sec is the combined rate at which all processors on the computer are switched from one thread to another.
            Context switches occur when a running thread voluntarily relinquishes the processor, is preempted by a higher priority ready thread, or switches between user-mode and privileged (kernel) mode to use an Executive or subsystem service.
            It is the sum of Thread\\Context Switches/sec for all threads running on all processors in the computer and is measured in numbers of switches.
            There are context switch counters on the System and Thread objects. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
          tags:
            - tag: component
              value: cpu
        - uuid: 683858ae0e8e4db4b6cb1af7f929395c
          name: 'CPU queue length'
          key: 'perf_counter_en["\System\Processor Queue Length"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: 'The Processor Queue Length shows the number of threads that are observed as delayed in the processor Ready Queue and are waiting to be executed.'
          tags:
            - tag: component
              value: cpu
        - uuid: c740a4ac1c6b481a93d6eb677ef761ac
          name: 'Number of threads'
          key: 'perf_counter_en["\System\Threads"]'
          history: 7d
          status: DISABLED
          description: 'The number of threads used by all running processes.'
          tags:
            - tag: component
              value: os
        - uuid: 4559d1d0953e4a0cad84411111d00aa2
          name: 'LibreHardwareMonitor proc num'
          key: 'proc.num[LibreHardwareMonitor.exe]'
          history: 1h
          trends: '0'
          triggers:
            - uuid: 6337f44e5b0440288d94f7abb7e4a025
              expression: 'last(/Windows laptop by WMI/proc.num[LibreHardwareMonitor.exe])=0'
              name: 'Программа мониторинга не запущена'
              priority: AVERAGE
              tags:
                - tag: scope
                  value: availability
        - uuid: c9e472ede8ad485586c2944a413921ab
          name: 'Number of processes'
          key: 'proc.num[]'
          history: 7d
          status: DISABLED
          description: 'The number of processes.'
          tags:
            - tag: component
              value: os
        - uuid: ad70b40aca8c4f44b1c004e34efa7a06
          name: 'Статус батареи'
          type: DEPENDENT
          key: status_bat
          delay: '0'
          history: 1w
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Status
            - type: TRIM
              parameters:
                - '[]"'
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_Battery"]'
        - uuid: 1c39a1524b324f24a894960d5056dd0c
          name: 'CPU utilization'
          key: system.cpu.util
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'CPU utilization expressed in %.'
          tags:
            - tag: component
              value: cpu
          triggers:
            - uuid: 1b1e558e06f8420eb012dbba57ef7970
              expression: 'min(/Windows laptop by WMI/system.cpu.util,5m)>{$CPU.UTIL.CRIT}'
              name: 'High CPU utilization'
              event_name: 'High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)'
              opdata: 'Current utilization: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'CPU utilization is too high. The system might be slow to respond.'
              tags:
                - tag: scope
                  value: performance
        - uuid: 2d91735693be4ab09d4e081728287867
          name: 'System name'
          key: system.hostname
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          description: 'The host name of the system.'
          inventory_link: NAME
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 70c3fa38541b4d31a27278fb843a7d81
              expression: 'change(/Windows laptop by WMI/system.hostname) and length(last(/Windows laptop by WMI/system.hostname))>0'
              name: 'System name has changed'
              event_name: 'System name has changed (new name: {ITEM.VALUE})'
              priority: INFO
              description: 'The name of the system has changed. Acknowledge to close the problem manually.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 4332f9cfc84044a69010e921bc4c1ff0
          name: 'System local time'
          key: system.localtime
          history: 7d
          units: unixtime
          description: 'The local system time of the host.'
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 6581c67a30d8453994e934c323f4a811
              expression: 'fuzzytime(/Windows laptop by WMI/system.localtime,{$SYSTEM.FUZZYTIME.MAX})=0'
              name: 'System time is out of sync'
              event_name: 'System time is out of sync (diff with Zabbix server > {$SYSTEM.FUZZYTIME.MAX}s)'
              priority: WARNING
              description: 'The host''s system time is different from Zabbix server time.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 1f85aae6da5f4eafadbdad1b392ac1c8
          name: 'Operating system architecture'
          key: system.sw.arch
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          status: DISABLED
          description: 'The architecture of the operating system.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: os
        - uuid: 9f4b485c66bd4e4183fd8835c215723e
          name: 'Operating system'
          key: system.sw.os
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          status: DISABLED
          inventory_link: OS
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: os
          triggers:
            - uuid: ba1cfaedeb7348a2bed7ff708d1a5ab8
              expression: 'change(/Windows laptop by WMI/system.sw.os) and length(last(/Windows laptop by WMI/system.sw.os))>0'
              name: 'Operating system description has changed'
              priority: INFO
              description: 'The description of the operating system has changed. Possible reasons are that the system has been updated or replaced. Acknowledge to close the problem manually.'
              manual_close: 'YES'
              dependencies:
                - name: 'System name has changed'
                  expression: 'change(/Windows laptop by WMI/system.hostname) and length(last(/Windows laptop by WMI/system.hostname))>0'
              tags:
                - tag: scope
                  value: notice
        - uuid: 0876a168a32d4d599212f8f516ccb120
          name: 'Free swap space'
          type: CALCULATED
          key: system.swap.free
          history: 7d
          status: DISABLED
          units: B
          params: 'last(//system.swap.size[,total]) - last(//system.swap.size[,total]) / 100 * last(//perf_counter_en["\Paging file(_Total)\% Usage"])'
          description: 'The free space of the swap volume/file expressed in bytes.'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: bd31a71945ad46088ca5bc331bb005a0
          name: 'Free swap space in %'
          type: DEPENDENT
          key: system.swap.pfree
          delay: '0'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The free space of the swap volume/file expressed in %.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - 'return (100 - value)'
          master_item:
            key: 'perf_counter_en["\Paging file(_Total)\% Usage"]'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: 58fa28c566214633b8f30f2f426342f9
          name: 'Total swap space'
          key: 'system.swap.size[,total]'
          history: 7d
          status: DISABLED
          units: B
          description: 'The total space of the swap volume/file expressed in bytes.'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: 846103927be4488d83fd2b5e02101c35
          name: 'System description'
          key: system.uname
          delay: 15m
          history: 7d
          value_type: CHAR
          trends: '0'
          description: 'System description of the host.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: system
        - uuid: d65fa6e86c77497dbb4b0f54cff871cd
          name: Uptime
          key: system.uptime
          history: 7d
          trends: '0'
          units: uptime
          description: 'The system uptime expressed in the following format: "N days, hh:mm:ss".'
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 538767b9a7e54b0b934f49934b0e674a
              expression: 'last(/Windows laptop by WMI/system.uptime)<10m'
              name: 'Host has been restarted'
              event_name: 'Host has been restarted (uptime < 10m)'
              priority: WARNING
              description: 'The device uptime is less than 10 minutes.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 975fef091bfe4cc8b6ecc809bea67b0e
          name: 'Get filesystems'
          key: vfs.fs.get
          history: '0'
          value_type: TEXT
          trends: '0'
          description: 'The `vfs.fs.get` key acquires raw information set about the filesystems. Later to be extracted by preprocessing in dependent items.'
          tags:
            - tag: component
              value: raw
        - uuid: 5b27ce30656043f49a75ff2980b5fa19
          name: 'Total memory'
          key: 'vm.memory.size[total]'
          history: 7d
          units: B
          description: 'Total memory expressed in bytes.'
          tags:
            - tag: component
              value: memory
        - uuid: f51c8f4862e44a88af2adb05a1ef5c8e
          name: 'Used memory'
          key: 'vm.memory.size[used]'
          history: 7d
          status: DISABLED
          units: B
          description: 'Used memory in bytes.'
          tags:
            - tag: component
              value: memory
        - uuid: b4014a9fe5ef4526964a826a6f3100bd
          name: 'Memory utilization'
          type: CALCULATED
          key: vm.memory.util
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          params: 'last(//vm.memory.size[used]) / last(//vm.memory.size[total]) * 100'
          description: 'Memory utilization in %.'
          tags:
            - tag: component
              value: memory
          triggers:
            - uuid: 2d03c1938d3a4e2daf5def5e12c951b7
              expression: 'min(/Windows laptop by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
              name: 'High memory utilization'
              event_name: 'High memory utilization (>{$MEMORY.UTIL.MAX}% for 5m)'
              priority: AVERAGE
              description: 'The system is running out of free memory.'
              tags:
                - tag: scope
                  value: capacity
                - tag: scope
                  value: performance
        - uuid: 5e99d9ef87df4ba6b7ac1d9248c1dd3d
          name: 'detect sensors'
          key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          history: 1h
          value_type: TEXT
          trends: '0'
          tags:
            - tag: component
              value: raw
          triggers:
            - uuid: 0f06d3cd0d3441a1a2d6c07fff392759
              expression: 'nodata(/Windows laptop by WMI/wmi.getall[root/LibreHardwareMonitor,select * from Sensor],5m)=1'
              name: 'LibreHardwareMonitor: Failed to fetch info data'
              event_name: 'LibreHardwareMonitor: Failed to fetch info data (or no data for 30m)'
              status: DISABLED
              priority: WARNING
              description: 'Zabbix has not received data for items for the last 5 minutes'
              dependencies:
                - name: 'Программа мониторинга не запущена'
                  expression: 'last(/Windows laptop by WMI/proc.num[LibreHardwareMonitor.exe])=0'
              tags:
                - tag: scope
                  value: availability
            - uuid: 2f04e38af1b64c30ad1c8db396b05699
              expression: 'last(/Windows laptop by WMI/wmi.getall[root/LibreHardwareMonitor,select * from Sensor],#1)="[]"'
              name: 'Ошибка получения данных'
              priority: AVERAGE
              dependencies:
                - name: 'Программа мониторинга не запущена'
                  expression: 'last(/Windows laptop by WMI/proc.num[LibreHardwareMonitor.exe])=0'
        - uuid: 81b1f382d0ca4569964e8ac848f345a9
          name: raw_battery
          key: 'wmi.getall[root\cimv2,"select * from Win32_Battery"]'
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: e79c00223e6c4c83b3011500c676f324
          name: raw_bios
          key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: ce1cba0a66de41efaff4e97c364b7872
          name: raw_gpu
          key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 3a0da83dfd9a4ffd84797ecf7576b4c6
          name: raw_cpu
          key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 93d3c0a60f304b6089202cfdb0767523
          name: raw_ram
          key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 172f1ed42706428c9757097784849ad0
          name: raw_os
          key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 8b819c08025145ac977de3f7ad180ac1
          name: raw_disks
          key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: f3b5a4d38886450681453d6b0c107e11
          name: raw_mb
          key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 3bb96b8858e1467d976c050f511fb788
          name: 'Windows: Network interfaces WMI get'
          key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
          history: '0'
          value_type: TEXT
          trends: '0'
          status: DISABLED
          description: 'Raw data of `win32_networkadapter.`'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          tags:
            - tag: component
              value: raw
        - uuid: c970369ed2c34f968f386173719aa131
          name: 'Number of cores'
          key: 'wmi.get[root/cimv2,"Select NumberOfLogicalProcessors from Win32_ComputerSystem"]'
          history: 7d
          status: DISABLED
          description: 'The number of logical processors available on the computer.'
          tags:
            - tag: component
              value: cpu
        - uuid: 64ac8bada4b34c358b18b7a1fd3adcf1
          name: 'Доступность Zabbix агента'
          type: INTERNAL
          key: 'zabbix[host,agent,available]'
          history: 1w
          trends: 30d
          triggers:
            - uuid: 623237a3567a449588bf55c0d8b66d5d
              expression: 'max(/Windows laptop by WMI/zabbix[host,agent,available],#3)=0'
              name: 'Zabbix агент недоступен'
              priority: HIGH
              dependencies:
                - name: 'Компьютер выключен'
                  expression: 'max(/Windows laptop by WMI/icmpping,#3)=0'
      discovery_rules:
        - uuid: c06e00c505fb4075b07e8b237ed8142d
          name: 'Обнаружение CPU'
          type: DEPENDENT
          key: cpu_discovery
          delay: '0'
          item_prototypes:
            - uuid: 720ef870dd924be6870a818b3bc0132a
              name: 'Процессор {#CPU_NAME}: архитектура'
              type: DEPENDENT
              key: 'cpu_architecture["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Architecture.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: c4d3383c24ad435789a639bbc5e282a8
              name: 'Процессор {#CPU_NAME}: доступность и статус'
              type: DEPENDENT
              key: 'cpu_availability["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              description: |
                Other (1)
                Unknown (2)
                Running/Full Power (3)
                Running or Full Power
                Warning (4)
                In Test (5)
                Not Applicable (6)
                Power Off (7)
                Off Line (8)
                Off Duty (9)
                Degraded (10)
                Not Installed (11)
                Install Error (12)
                Power Save - Unknown (13)
                The device is known to be in a power save state, but its exact status is unknown.
                Power Save - Low Power Mode (14)
                The device is in a power save state, but is still functioning, and may exhibit decreased performance.
                Power Save - Standby (15)
                The device is not functioning, but can be brought to full power quickly.
                Power Cycle (16)
                Power Save - Warning (17)
                The device is in a warning state, though also in a power save state.
                Paused (18)
                The device is paused.
                Not Ready (19)
                The device is not ready.
                Not Configured (20)
                The device is not configured.
                Quiesced (21)
                The device is quiet.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Availability.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: e74e6784999044c1bbacf01688f0a710
              name: 'Процессор {#CPU_NAME}: базовая частота'
              type: DEPENDENT
              key: 'cpu_current_clock_speed["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].CurrentClockSpeed.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 7194e8dec40e40ab90bc535e79382d6e
              name: 'Процессор {#CPU_NAME}: базовое напряжение'
              type: DEPENDENT
              key: 'cpu_current_voltage["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: V
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].CurrentVoltage.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 70ab097a343f4605b3d334d90fcd4864
              name: 'Процессор {#CPU_NAME}: описание'
              type: DEPENDENT
              key: 'cpu_description["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Description.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: da35dd886b9d4ab28df5f582949bfebe
              name: 'Процессор {#CPU_NAME}: частота внешнего таймера'
              type: DEPENDENT
              key: 'cpu_ext_clock["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].ExtClock.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 0237d0d712f94d0d982fcb0153a02eec
              name: 'Процессор {#CPU_NAME}: объём кэша L2'
              type: DEPENDENT
              key: 'cpu_L2_cache_size["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].L2CacheSize.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1024'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 1a1177a888c74f3ba56de6315c92aeda
              name: 'Процессор {#CPU_NAME}: объём кэша L3'
              type: DEPENDENT
              key: 'cpu_L3_cache_size["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].L3CacheSize.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1024'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 92b3df3c69ce4909a89660b4a2c770c2
              name: 'Процессор {#CPU_NAME}: производитель'
              type: DEPENDENT
              key: 'cpu_manufacturer["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Manufacturer,.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 26e87d68196e40f79692cfab9618e003
              name: 'Процессор {#CPU_NAME}: количество ядер'
              type: DEPENDENT
              key: 'cpu_number_of_cores["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].NumberOfCores.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 846dcbd0e5d542118a504eecb2f898fc
              name: 'Процессор {#CPU_NAME}: количество потоков'
              type: DEPENDENT
              key: 'cpu_number_of_threads["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].ThreadCount.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: d0c67c0e90ab41a0a718d4f4a7fc0815
              name: 'Процессор {#CPU_NAME}: номер партии'
              type: DEPENDENT
              key: 'cpu_part_number["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].PartNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: cf539ca7b4aa4826bb7f23a352c8e028
              name: 'Процессор {#CPU_NAME}: серийный номер'
              type: DEPENDENT
              key: 'cpu_serial_number["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].SerialNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: d5a10fcec589401180655fb862b0d9ce
              name: 'Процессор {#CPU_NAME}: сокет'
              type: DEPENDENT
              key: 'cpu_socket["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].SocketDesignation.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: e66bd62ef253410bbc418aa5ea0e8275
              name: 'Процессор {#CPU_NAME}: статус'
              type: DEPENDENT
              key: 'cpu_status["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              description: |
                Unknown (0)
                CPU Enabled (1)
                CPU Disabled by User via BIOS Setup (2)
                CPU Disabled By BIOS (POST Error) (3)
                CPU is Idle (4)
                Reserved (5)
                Reserved (6)
                Other (7)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].CpuStatus.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: f20a12c424624376b32781c0c2069714
              name: 'Процессор {#CPU_NAME}: опция виртуализации'
              type: DEPENDENT
              key: 'cpu_virtualization_enabled["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].VirtualizationFirmwareEnabled.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(cpu){
                  	return {
                                  "{#CPU_NAME}": cpu.Name.trim(),
                                  "{#CPU_ID}": cpu.DeviceID
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: 3d229c52c721489693eab8405c97568e
          name: 'Датчики CPU'
          type: DEPENDENT
          key: cpu_sensors_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: CPU
                formulaid: A
          lifetime: 30d
          item_prototypes:
            - uuid: 8171818ee1cc4c0f993cf3b10bcaf6b2
              name: 'load / {#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: '1cpu_load[{#SENSOR_ID}]'
              delay: '0'
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SensorType == "Load")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
            - uuid: efc59469f2e148b7a9625db99c8bc8a2
              name: 'temp / {#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: '1cpu_temperature[{#SENSOR_ID}]'
              delay: '0'
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.{#SENSOR_TYPE} == "Temperature")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#SENSOR_NAME}": sensor.Name,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 625ad79a60554d47ae28d600371f9413
          name: 'Датчики температуры CPU'
          type: DEPENDENT
          key: cpu_temperatures_discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: CPU
                formulaid: A
              - macro: '{#SENSOR_NAME}'
                value: CCD
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#SENSOR_NAME}'
                value: 'Core #'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              - macro: '{#SENSOR_NAME}'
                value: 'Core Average'
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#SENSOR_NAME}'
                value: 'Core Max'
                operator: NOT_MATCHES_REGEX
                formulaid: E
              - macro: '{#SENSOR_NAME}'
                value: 'Distance to TjMax'
                operator: NOT_MATCHES_REGEX
                formulaid: F
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: G
          lifetime: 30d
          item_prototypes:
            - uuid: 4793b9e2aba9499d8074dc1166634cc9
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'cpu_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1w
              value_type: FLOAT
              trends: 30d
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: b92f43230a3945a982f1ac39f9e97771
                  expression: 'min(/Windows laptop by WMI/cpu_temperature[{#SENSOR_ID}],5m)>={$CPU_TEMP_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/cpu_temperature[{#SENSOR_ID}],5m)<={$CPU_TEMP_CRIT}-3'
                  name: 'Температура {#DEVICE} > {$CPU_TEMP_CRIT} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: 731ab349592447938a18b8023c269461
                  expression: 'min(/Windows laptop by WMI/cpu_temperature[{#SENSOR_ID}],5m)>={$CPU_TEMP_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/cpu_temperature[{#SENSOR_ID}],5m)<={$CPU_TEMP_WARN}-3'
                  name: 'Температура {#DEVICE} > {$CPU_TEMP_WARN} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Температура {#DEVICE} > {$CPU_TEMP_CRIT} °C'
                      expression: 'min(/Windows laptop by WMI/cpu_temperature[{#SENSOR_ID}],5m)>={$CPU_TEMP_CRIT}'
                      recovery_expression: 'min(/Windows laptop by WMI/cpu_temperature[{#SENSOR_ID}],5m)<={$CPU_TEMP_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  function replaceName(inputString) {
                      if (inputString.match(/CPU Core #(\d+) Distance to TjMax/)) {
                          return "Distance to TjMax";
                      }
                      if (inputString.includes("CPU Core")) {
                           return inputString.split("CPU")[1] + " Temperature";
                      }
                      else if (inputString.includes("CPU")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("Core")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("(Tdie)")) {
                           return inputString + " Temperature";
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": replaceName(sensor.Name),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: b02682c435724acc9ca085762be5ec92
          name: 'Data sensors discovery'
          type: DEPENDENT
          key: data.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSORTYPE}'
                value: Data
                formulaid: A
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: 964794ef4e894fd9a58bd94d9ba3d2da
              name: '{#DEVICE} {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'data.sensor["{#SENSORPATH}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              tags:
                - tag: component
                  value: data
                - tag: sensor
                  value: '{#SENSORPARENT}'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function containsDisks(str) {
                      const disks = ['hdd', 'ssd', 'nvme'];
                      return disks.some(function(disk) {
                          return str.includes(disk);
                      });
                  }
                  
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                          else{
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[1]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU " + cpuBrand + " №" + incrementedNumber;
                      }
                      else if (containsDisks(target)) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск №" + incrementedNumber + " " + uppercasedTarget;
                      }  
                      
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(data){
                      return {
                          "{#SENSOR_ID}": data.Identifier,
                          "{#DEVICE}": replaceString(data.Identifier),
                          "{#SENSOR_NAME}": data.Name,
                          "{#SENSOR_TYPE}": data.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: d24a75d96b714247878935803c702831
          name: 'Датчики температуры дисков'
          type: DEPENDENT
          key: disks_temperatures_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: HDD
                formulaid: A
              - macro: '{#DEVICE}'
                value: NVME
                formulaid: B
              - macro: '{#DEVICE}'
                value: SSD
                formulaid: C
              - macro: '{#SENSOR_NAME}'
                value: Temperature
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: E
          lifetime: 30d
          item_prototypes:
            - uuid: 8ab95e69f8ed4fb5aa2a4107effc8675
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'disk_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: 86fdd41474794f8ab02ebbeb6ba7edf3
                  expression: 'min(/Windows laptop by WMI/disk_temperature[{#SENSOR_ID}],5m)>={$DISK_TEMP_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/disk_temperature[{#SENSOR_ID}],5m)<={$DISK_TEMP_CRIT}-3'
                  name: 'Температура {#DEVICE} > {$DISK_TEMP_CRIT} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: c8b21a80671b4a94aa3aae2747880811
                  expression: 'min(/Windows laptop by WMI/disk_temperature[{#SENSOR_ID}],5m)>={$DISK_TEMP_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/disk_temperature[{#SENSOR_ID}],5m)<={$DISK_TEMP_WARN}-3'
                  name: 'Температура {#DEVICE} > {$DISK_TEMP_WARN} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Температура {#DEVICE} > {$DISK_TEMP_CRIT} °C'
                      expression: 'min(/Windows laptop by WMI/disk_temperature[{#SENSOR_ID}],5m)>={$DISK_TEMP_CRIT}'
                      recovery_expression: 'min(/Windows laptop by WMI/disk_temperature[{#SENSOR_ID}],5m)<={$DISK_TEMP_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("hdd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget;
                      }  
                      else if (target.includes("ssd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - SATA " + uppercasedTarget;
                      }
                      else if (target.includes("nvme")) {
                          const uppercasedExceptLast = target.slice(0, -1).toUpperCase();
                          const lastChar = target.slice(-1);
                          const uppercasedTarget = uppercasedExceptLast + lastChar;
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget + " SSD";
                      }
                      else {
                          return inputString;
                      }    
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": sensor.Name,
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 976d15ab7c7d422383f625af40f7cbe7
          name: 'Обнаружение дисков'
          type: DEPENDENT
          key: disk_discovery
          delay: '0'
          item_prototypes:
            - uuid: e9d608e9e99b4d7fb10a48975bef62f2
              name: 'Диск {#DISK_MODEL}: код ошибки'
              type: DEPENDENT
              key: 'disk_config_manager_error_code["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              description: |
                This device is working properly. (0)
                This device is not configured correctly. (1)
                Windows cannot load the driver for this device. (2)
                The driver for this device might be corrupted, or your system may be running low on memory or other resources. (3)
                This device is not working properly. One of its drivers or your registry might be corrupted. (4)
                The driver for this device needs a resource that Windows cannot manage. (5)
                The boot configuration for this device conflicts with other devices. (6)
                Cannot filter. (7)
                The driver loader for the device is missing. (8)
                This device is not working properly because the controlling firmware is reporting the resources for the device incorrectly. (9)
                This device cannot start. (10)
                This device failed. (11)
                This device cannot find enough free resources that it can use. (12)
                Windows cannot verify this device's resources. (13)
                This device cannot work properly until you restart your computer. (14)
                This device is not working properly because there is probably a re-enumeration problem. (15)
                Windows cannot identify all the resources this device uses. (16)
                This device is asking for an unknown resource type. (17)
                Reinstall the drivers for this device. (18)
                Failure using the VxD loader. (19)
                Your registry might be corrupted. (20)
                System failure: Try changing the driver for this device. If that does not work, see your hardware documentation. Windows is removing this device. (21)
                This device is disabled. (22)
                System failure: Try changing the driver for this device. If that doesn't work, see your hardware documentation. (23)
                This device is not present, is not working properly, or does not have all its drivers installed. (24)
                Windows is still setting up this device. (25)
                Windows is still setting up this device. (26)
                This device does not have valid log configuration. (27)
                The drivers for this device are not installed. (28)
                This device is disabled because the firmware of the device did not give it the required resources. (29)
                This device is using an Interrupt Request (IRQ) resource that another device is using. (30)
                This device is not working properly because Windows cannot load the drivers required for this device. (31)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].ConfigManagerErrorCode.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
              trigger_prototypes:
                - uuid: ed5d785b0ce14c4388afb56a494c267a
                  expression: 'last(/Windows laptop by WMI/disk_config_manager_error_code["{#DISK_ID}"])<>0'
                  name: 'Ошибка диска {#DISK_MODEL}'
                  priority: AVERAGE
            - uuid: dd53cd4a9e7444ba888b1128cf714174
              name: 'Диск {#DISK_MODEL}: версия ПО'
              type: DEPENDENT
              key: 'disk_firmware["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].FirmwareRevision.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 48f1c30cb3214d24887827faa5a42557
              name: 'Диск {#DISK_MODEL}: тип интерфейса'
              type: DEPENDENT
              key: 'disk_interface_type["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].InterfaceType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: f28aacf180984eae80876ca3c842ed87
              name: 'Диск {#DISK_MODEL}: производитель'
              type: DEPENDENT
              key: 'disk_manufacturer["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].Manufacturer.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 32cbe89dd0094417a6bbc62054ef8f77
              name: 'Диск {#DISK_MODEL}: слот SCSI'
              type: DEPENDENT
              key: 'disk_SCSIPort["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].SCSIPort.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 66083882854845fc991ea0dfd9c55bea
              name: 'Диск {#DISK_MODEL}: серийный номер'
              type: DEPENDENT
              key: 'disk_serial_number["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].SerialNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: e6caa95d861e44079be3da4af39141ed
              name: 'Диск {#DISK_MODEL}: объём'
              type: DEPENDENT
              key: 'disk_size["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].Size.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: cb89759b395947dd97b990fd206ee410
              name: 'Диск {#DISK_MODEL}: статус'
              type: DEPENDENT
              key: 'disk_status["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].Status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(disk){
                  	return {
                                  "{#DISK_ID}": disk.DeviceID,
                                  "{#DISK_MODEL}": disk.Model.trim()
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: b164fbde241a49f18f9825df71c60e95
          name: Вентиляторы
          type: DEPENDENT
          key: fans_discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSOR_TYPE}'
                value: Fan
                formulaid: A
          lifetime: 30d
          item_prototypes:
            - uuid: 8bf253100f0442f6ae6bf6ec48573d91
              name: '{#SENSOR_NAME}: скорость вращения'
              type: DEPENDENT
              key: 'fan_rpm["{#SENSOR_ID}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: RPM
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      var gpuPattern = /.*\/gpu-([^\/]+)\/(\d+)\/fan\/(\d+)/;
                      var gpuMatch = inputString.match(gpuPattern);
                      var Pattern = /.*\/0\/fan\/(\d+)/;
                      var Match = inputString.match(Pattern);
                  
                      if (gpuMatch) {
                          var gpuBrand = gpuMatch[1];
                          var gpuNumber = parseInt(gpuMatch[2], 10);
                          var Number = parseInt(gpuMatch[3], 10);
                          var newGpuNumber = gpuNumber + 1;
                  
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                  
                          return "GPU # " + newGpuNumber + " - " + gpuBrand + " Fan #" + Number;
                      }
                  
                      else if (Match) {
                          var Number = parseInt(Match[1], 10);
                  
                          if (Number === 0) {
                              return "CPU Fan";
                          } else {
                              return "Fan  #" + Number;
                          }
                      }
                  
                      return inputString;
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#SENSOR_NAME}": replaceString(sensor.Identifier),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 47e660e6e4a84d0ba118f429471a504b
          name: 'Обнаружение GPU'
          type: DEPENDENT
          key: gpu_discovery
          delay: '0'
          filter:
            evaltype: OR
            conditions:
              - macro: '{#GPU_FILTER}'
                value: amd
                formulaid: A
              - macro: '{#GPU_FILTER}'
                value: intel
                formulaid: B
              - macro: '{#GPU_FILTER}'
                value: nvidia
                formulaid: C
          item_prototypes:
            - uuid: 06d7865d553d48a8b5ad44313bf74102
              name: 'GPU {#GPU_NAME}: архитектура'
              type: DEPENDENT
              key: 'gpu_architecture["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].VideoArchitecture.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 0c589ebb2c0a4394a6667f6248d990ca
              name: 'GPU {#GPU_NAME}: доступность'
              type: DEPENDENT
              key: 'gpu_availability["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              description: |
                Other (1)
                Unknown (2)
                Running/Full Power (3)
                Warning (4)
                In Test (5)
                Not Applicable (6)
                Power Off (7)
                Off Line (8)
                Offline
                Off Duty (9)
                Degraded (10)
                Not Installed (11)
                Install Error (12)
                Power Save - Unknown (13)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Availability.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 45e7ecc5483e41659118e7f3a4445211
              name: 'GPU {#GPU_NAME}: подпись'
              type: DEPENDENT
              key: 'gpu_caption["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Caption.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: cb1a4ca8c04d4069a952f6ab73316f36
              name: 'GPU {#GPU_NAME}: код ошибки'
              type: DEPENDENT
              key: 'gpu_config_manager_error_code["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              description: |
                This device is working properly. (0)
                This device is not configured correctly. (1)
                Windows cannot load the driver for this device. (2)
                The driver for this device might be corrupted, or your system may be running low on memory or other resources. (3)
                This device is not working properly. One of its drivers or your registry might be corrupted. (4)
                The driver for this device needs a resource that Windows cannot manage. (5)
                The boot configuration for this device conflicts with other devices. (6)
                Cannot filter. (7)
                The driver loader for the device is missing. (8)
                This device is not working properly because the controlling firmware is reporting the resources for the device incorrectly. (9)
                This device cannot start. (10)
                This device failed. (11)
                This device cannot find enough free resources that it can use. (12)
                Windows cannot verify this device's resources. (13)
                This device cannot work properly until you restart your computer. (14)
                This device is not working properly because there is probably a re-enumeration problem. (15)
                Windows cannot identify all the resources this device uses. (16)
                This device is asking for an unknown resource type. (17)
                Reinstall the drivers for this device. (18)
                Failure using the VxD loader. (19)
                Your registry might be corrupted. (20)
                System failure: Try changing the driver for this device. If that does not work, see your hardware documentation. Windows is removing this device. (21)
                This device is disabled. (22)
                System failure: Try changing the driver for this device. If that doesn't work, see your hardware documentation. (23)
                This device is not present, is not working properly, or does not have all its drivers installed. (24)
                Windows is still setting up this device. (25)
                Windows is still setting up this device. (26)
                This device does not have valid log configuration. (27)
                The drivers for this device are not installed. (28)
                This device is disabled because the firmware of the device did not give it the required resources. (29)
                This device is using an Interrupt Request (IRQ) resource that another device is using. (30)
                This device is not working properly because Windows cannot load the drivers required for this device. (31)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].ConfigManagerErrorCode.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
              trigger_prototypes:
                - uuid: 6eb6bc98e397454e86e1e51cef36afa8
                  expression: 'last(/Windows laptop by WMI/gpu_config_manager_error_code["{#GPU_ID}"])<>0'
                  name: 'Ошибка GPU {#GPU_NAME}'
                  priority: AVERAGE
            - uuid: f85d583bc88f48ab9dc701fe5ad23bb8
              name: 'GPU {#GPU_NAME}: описание'
              type: DEPENDENT
              key: 'gpu_description["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Description.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 9ae174621d9a4e0bae8b767a3018617b
              name: 'GPU {#GPU_NAME}: дата релиза драйвера'
              type: DEPENDENT
              key: 'gpu_driver_date["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].DriverDate.first()'
                - type: REGEX
                  parameters:
                    - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                    - '\3.\2.\1 \4:\5:\6'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 694e32ed064142cbb54de71a25a19fce
              name: 'GPU {#GPU_NAME}: версия драйвера'
              type: DEPENDENT
              key: 'gpu_driver_version["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].DriverVersion.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 29b17444512142c4b3d8334d97958f3a
              name: 'GPU {#GPU_NAME}: горизонтальное разрешение экрана'
              type: DEPENDENT
              key: 'gpu_horizontal_resolution["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].CurrentHorizontalResolution.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: b69196778c61421d95a521b1eaebbfb0
              name: 'GPU {#GPU_NAME}: тип памяти'
              type: DEPENDENT
              key: 'gpu_memory_type["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].VideoMemoryType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 898c9a2b6f9b4f749e811e7d79b22864
              name: 'GPU {#GPU_NAME}: процессор'
              type: DEPENDENT
              key: 'gpu_processor["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].VideoProcessor.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 82eb2b5719ce4268b86442a6bd953d42
              name: 'GPU {#GPU_NAME}: RAM'
              type: DEPENDENT
              key: 'gpu_ram["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].AdapterRAM.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: cdaefd96220a44088f7aa52e3acc31cf
              name: 'GPU {#GPU_NAME}: частота обновления экрана'
              type: DEPENDENT
              key: 'gpu_refresh_rate["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].CurrentRefreshRate.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: c5ed1cf4329f46d687df1ce0282d5bc7
              name: 'GPU {#GPU_NAME}: статус'
              type: DEPENDENT
              key: 'gpu_status["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: efdf6b402d1844258b10fae072074d18
              name: 'GPU {#GPU_NAME}: вертикальное разрешение экрана'
              type: DEPENDENT
              key: 'gpu_vertical_resolution["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].CurrentVerticalResolution.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function findBrandSubstring(inputString) {
                      // Переводим входную строку в нижний регистр
                      var lowerCaseString = inputString.toLowerCase();
                  
                      // Список брендов для поиска
                      var brands = ["amd", "nvidia", "intel"];
                  
                      // Ищем каждый бренд в строке
                      for (var i = 0; i < brands.length; i++) {
                          var brand = brands[i];
                          if (lowerCaseString.includes(brand)) {
                              return brand;
                          }
                      }
                  
                      // Если ничего не найдено, возвращаем "other"
                      return "other";
                  }
                  
                  output = JSON.parse(value).map(function(gpu){
                  	return {
                                  "{#GPU_FILTER}": findBrandSubstring(gpu.Name),
                                  "{#GPU_NAME}": gpu.Name.trim(),
                                  "{#GPU_ID}": gpu.DeviceID
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: 458a3987e4974e43a2beb596409eff7d
          name: 'Датчики температуры GPU'
          type: DEPENDENT
          key: gpu_temperatures_discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: GPU
                formulaid: A
              - macro: '{#SENSOR_NAME}'
                value: 'Hot Spot Temperature'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: C
          lifetime: 30d
          item_prototypes:
            - uuid: a742fb667a144a7e8899adb12afe6f4e
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'gpu_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1w
              value_type: FLOAT
              trends: 30d
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: e4796ae5e63b4ff1a7ee508263d9f092
                  expression: 'min(/Windows laptop by WMI/gpu_temperature[{#SENSOR_ID}],5m)>={$GPU_TEMP_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/gpu_temperature[{#SENSOR_ID}],5m)<={$GPU_TEMP_CRIT}-3'
                  name: 'Температура {#DEVICE} > {$GPU_TEMP_CRIT} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: c7214bc321b94114bfdd33a0c1b6ec8e
                  expression: 'min(/Windows laptop by WMI/gpu_temperature[{#SENSOR_ID}],5m)>={$GPU_TEMP_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/gpu_temperature[{#SENSOR_ID}],5m)<={$GPU_TEMP_WARN}-3'
                  name: 'Температура {#DEVICE} > {$GPU_TEMP_WARN} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Температура {#DEVICE} > {$GPU_TEMP_CRIT} °C'
                      expression: 'min(/Windows laptop by WMI/gpu_temperature[{#SENSOR_ID}],5m)>={$GPU_TEMP_CRIT}'
                      recovery_expression: 'min(/Windows laptop by WMI/gpu_temperature[{#SENSOR_ID}],5m)<={$GPU_TEMP_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                          else{
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  function replaceName(inputString) {
                      if (inputString.includes("GPU")) {
                           return inputString.split('GPU')[1] + " Temperature";
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": replaceName(sensor.Name),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 95aab2cd2dda49efb410d0ee184a2b9d
          name: Нагрузка
          type: DEPENDENT
          key: load_discovery
          delay: '0'
          filter:
            evaltype: FORMULA
            formula: 'A and ((B and C) or (D and E) or (F and G and H and I))'
            conditions:
              - macro: '{#SENSOR_TYPE}'
                value: Load
                formulaid: A
              - macro: '{#DEVICE}'
                value: CPU
                formulaid: B
              - macro: '{#SENSOR_NAME}'
                value: 'CPU Total'
                formulaid: C
              - macro: '{#DEVICE}'
                value: GPU
                formulaid: D
              - macro: '{#SENSOR_NAME}'
                value: 'GPU Core'
                formulaid: E
              - macro: '{#DEVICE}'
                value: RAM
                formulaid: F
              - macro: '{#SENSOR_NAME}'
                value: 'Memory Available'
                operator: NOT_MATCHES_REGEX
                formulaid: G
              - macro: '{#SENSOR_NAME}'
                value: 'Memory Used'
                operator: NOT_MATCHES_REGEX
                formulaid: H
              - macro: '{#SENSOR_NAME}'
                value: 'Virtual Memory'
                operator: NOT_MATCHES_REGEX
                formulaid: I
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: a27f2a8925de461c9570f169eee78fe2
              name: '{#DEVICE}: {#SENSOR_NAME} load'
              type: DEPENDENT
              key: 'load[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: 7481952d5830441ca17a681a0b42bf71
                  expression: 'min(/Windows laptop by WMI/load[{#SENSOR_ID}],5m)>={$LOAD_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/load[{#SENSOR_ID}],5m)<={$LOAD_CRIT}-3'
                  name: 'Загрузка {#DEVICE} > {$LOAD_CRIT} %'
                  opdata: 'Текущая загрузка:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: d76e539b0bb4480f8a60df5ab82ba027
                  expression: 'min(/Windows laptop by WMI/load[{#SENSOR_ID}],5m)>={$LOAD_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows laptop by WMI/load[{#SENSOR_ID}],5m)<={$LOAD_WARN}-3'
                  name: 'Загрузка {#DEVICE} > {$LOAD_WARN} %'
                  opdata: 'Текущая загрузка:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Загрузка {#DEVICE} > {$LOAD_CRIT} %'
                      expression: 'min(/Windows laptop by WMI/load[{#SENSOR_ID}],5m)>={$LOAD_CRIT}'
                      recovery_expression: 'min(/Windows laptop by WMI/load[{#SENSOR_ID}],5m)<={$LOAD_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("ram")) {
                          return "RAM";
                      }
                      else if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                          else{
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else if (target.includes("hdd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget;
                      }  
                      else if (target.includes("ssd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - SATA " + uppercasedTarget;
                      }
                      else if (target.includes("nvme")) {
                          const uppercasedExceptLast = target.slice(0, -1).toUpperCase();
                          const lastChar = target.slice(-1);
                          const uppercasedTarget = uppercasedExceptLast + lastChar;
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget + " SSD";
                      }
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(load){
                      return {
                          "{#SENSOR_ID}": load.Identifier,
                          "{#DEVICE}": replaceString(load.Identifier),
                          "{#SENSOR_NAME}": load.Name,
                          "{#SENSOR_TYPE}": load.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 158a290f2a6341acba4cb8319a5d3254
          name: 'Обнаружение материнской платы'
          type: DEPENDENT
          key: mb_discovery
          delay: '0'
          item_prototypes:
            - uuid: 7500830a1b2e42229bed01ad773b6418
              name: 'Материнская плата {#MB_PRODUCT}: производитель'
              type: DEPENDENT
              key: 'mb_manufacturer["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].Manufacturer.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
            - uuid: 857e2745b2e646c2b021485a60d15fa0
              name: 'Материнская плата {#MB_PRODUCT}: серийный номер'
              type: DEPENDENT
              key: 'mb_serial_number["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].SerialNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
            - uuid: 853454aadfd740dfbcbb6e664c0148cb
              name: 'Материнская плата {#MB_PRODUCT}: статус'
              type: DEPENDENT
              key: 'mb_status["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].Status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
            - uuid: 021b9fc98d9c47c89a5e226de670e2c4
              name: 'Материнская плата {#MB_PRODUCT}: версия'
              type: DEPENDENT
              key: 'mb_version["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].Version.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(mb){
                  	return {
                                  "{#MB_PRODUCT}": mb.Product.trim(),
                                  "{#MB_SERIAL_NUMBER}": mb.SerialNumber
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: d6926c807f2f450393efc74cf3d67cd8
          name: 'Датчики температуры материнской платы'
          type: DEPENDENT
          key: mb_temperatures_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: LPC
                formulaid: A
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: B
          lifetime: 30d
          item_prototypes:
            - uuid: eb92f1a6ceb44e82bd0129892a375085
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'mb_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": sensor.Name,
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: e167c51d58bb4aa9952b18945b7f54f8
          name: 'Network interfaces discovery'
          type: DEPENDENT
          key: net.if.discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#IFALIAS}'
                value: '{$NET.IF.IFALIAS.MATCHES}'
                formulaid: A
              - macro: '{#IFALIAS}'
                value: '{$NET.IF.IFALIAS.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#IFDESCR}'
                value: '{$NET.IF.IFDESCR.MATCHES}'
                formulaid: C
              - macro: '{#IFDESCR}'
                value: '{$NET.IF.IFDESCR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#IFNAME}'
                value: '{$NET.IF.IFNAME.MATCHES}'
                formulaid: E
              - macro: '{#IFNAME}'
                value: '{$NET.IF.IFNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: F
          description: 'Discovery of installed network interfaces.'
          item_prototypes:
            - uuid: 32d5966dd766422ba00d7a2e91e836d5
              name: 'Interface {#IFNAME}({#IFALIAS}): Inbound packets discarded'
              key: 'net.if.in["{#IFGUID}",dropped]'
              delay: 3m
              history: 7d
              description: 'The number of incoming packets dropped on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: e1ec72d9db0c4eb28457237210d62626
              name: 'Interface {#IFNAME}({#IFALIAS}): Inbound packets with errors'
              key: 'net.if.in["{#IFGUID}",errors]'
              delay: 3m
              history: 7d
              description: 'The number of incoming packets with errors on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 047eb3781b7647749a9eff756ccdabb1
              name: 'Interface {#IFNAME}({#IFALIAS}): Bits received'
              key: 'net.if.in["{#IFGUID}"]'
              delay: 3m
              history: 7d
              units: bps
              description: 'Incoming traffic on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                - type: MULTIPLIER
                  parameters:
                    - '8'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: d3968da13977425492c3a22ead3293e2
              name: 'Interface {#IFNAME}({#IFALIAS}): Outbound packets discarded'
              key: 'net.if.out["{#IFGUID}",dropped]'
              delay: 3m
              history: 7d
              description: 'The number of outgoing packets dropped on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 5f1ceeaecf4f4bdba556a2e0c2b2aa20
              name: 'Interface {#IFNAME}({#IFALIAS}): Outbound packets with errors'
              key: 'net.if.out["{#IFGUID}",errors]'
              delay: 3m
              history: 7d
              description: 'The number of outgoing packets with errors on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: c75042ddc4854e69a13eba6ccb75f7c2
              name: 'Interface {#IFNAME}({#IFALIAS}): Bits sent'
              key: 'net.if.out["{#IFGUID}"]'
              delay: 3m
              history: 7d
              units: bps
              description: 'Outgoing traffic on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                - type: MULTIPLIER
                  parameters:
                    - '8'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 953ec820483948938e432447c4039678
              name: 'Interface {#IFNAME}({#IFALIAS}): Speed'
              type: DEPENDENT
              key: 'net.if.speed["{#IFGUID}"]'
              delay: '0'
              history: 7d
              trends: '0'
              units: bps
              description: 'Estimated bandwidth of the network interface if any.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.GUID == "{#IFGUID}")].Speed.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
                - type: JAVASCRIPT
                  parameters:
                    - 'return (value==''9223372036854775807'' ? 0 : value)'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 8c3aca4c1ac64b858b40527b53ec1641
              name: 'Interface {#IFNAME}({#IFALIAS}): Operational status'
              type: DEPENDENT
              key: 'net.if.status["{#IFGUID}"]'
              delay: '0'
              history: 7d
              trends: '0'
              description: 'The operational status of the network interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.GUID == "{#IFGUID}")].NetConnectionStatus.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
              trigger_prototypes:
                - uuid: b6d65e9a880e418296961069411a4978
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
                  name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: |
                    This trigger expression works as follows:
                    1. It can be triggered if the operations status is down.
                    2. `{$IFCONTROL:"{#IFNAME}"}=1` - a user can redefine the context macro to "0", marking this interface as not important.
                    No new trigger will be fired if this interface is down.
                    3. `last(/TEMPLATE_NAME/METRIC,#1)<>last(/TEMPLATE_NAME/METRIC,#2)` - the trigger fires only if the operational status was up to (1) sometime before (so, does not fire for the 'eternal off' interfaces.)
                    
                    WARNING: if closed manually - it will not fire again on the next poll, because of .diff.
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: 860d9ada706140e7b139bd697ed1e534
              name: 'Interface {#IFNAME}({#IFALIAS}): Interface type'
              type: DEPENDENT
              key: 'net.if.type["{#IFGUID}"]'
              delay: '0'
              history: 7d
              trends: '0'
              description: 'The type of the network interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.GUID == "{#IFGUID}")].AdapterTypeId.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
          trigger_prototypes:
            - uuid: 68bfa0e284624011ad14742e41437992
              expression: |
                change(/Windows laptop by WMI/net.if.speed["{#IFGUID}"])<0 and
                last(/Windows laptop by WMI/net.if.speed["{#IFGUID}"])>0 and
                last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])=2
              name: 'Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before'
              opdata: 'Current reported speed: {ITEM.LASTVALUE1}'
              priority: INFO
              description: 'This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Acknowledge to close the problem manually.'
              manual_close: 'YES'
              dependencies:
                - name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_expression: 'last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: capacity
            - uuid: fb7be83d4a984dcb9a20f05ced224711
              expression: |
                (avg(/Windows laptop by WMI/net.if.in["{#IFGUID}"],15m)>({$IF.UTIL.MAX:"{#IFNAME}"}/100)*last(/Windows laptop by WMI/net.if.speed["{#IFGUID}"]) or
                avg(/Windows laptop by WMI/net.if.out["{#IFGUID}"],15m)>({$IF.UTIL.MAX:"{#IFNAME}"}/100)*last(/Windows laptop by WMI/net.if.speed["{#IFGUID}"])) and
                last(/Windows laptop by WMI/net.if.speed["{#IFGUID}"])>0
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                avg(/Windows laptop by WMI/net.if.in["{#IFGUID}"],15m)<(({$IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*last(/Windows laptop by WMI/net.if.speed["{#IFGUID}"]) and
                avg(/Windows laptop by WMI/net.if.out["{#IFGUID}"],15m)<(({$IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*last(/Windows laptop by WMI/net.if.speed["{#IFGUID}"])
              name: 'Interface {#IFNAME}({#IFALIAS}): High bandwidth usage'
              event_name: 'Interface {#IFNAME}({#IFALIAS}): High bandwidth usage (>{$IF.UTIL.MAX:"{#IFNAME}"}%)'
              opdata: 'In: {ITEM.LASTVALUE1}, out: {ITEM.LASTVALUE3}, speed: {ITEM.LASTVALUE2}'
              priority: WARNING
              description: 'The utilization of the network interface is close to its estimated maximum bandwidth.'
              manual_close: 'YES'
              dependencies:
                - name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_expression: 'last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: performance
            - uuid: 90f63f12f16d44f1ae349bf40d1a601a
              expression: |
                min(/Windows laptop by WMI/net.if.in["{#IFGUID}",errors],5m)>{$IF.ERRORS.WARN:"{#IFNAME}"}
                or min(/Windows laptop by WMI/net.if.out["{#IFGUID}",errors],5m)>{$IF.ERRORS.WARN:"{#IFNAME}"}
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                max(/Windows laptop by WMI/net.if.in["{#IFGUID}",errors],5m)<{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8
                and max(/Windows laptop by WMI/net.if.out["{#IFGUID}",errors],5m)<{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8
              name: 'Interface {#IFNAME}({#IFALIAS}): High error rate'
              event_name: 'Interface {#IFNAME}({#IFALIAS}): High error rate (>{$IF.ERRORS.WARN:"{#IFNAME}"} for 5m)'
              opdata: 'errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}'
              priority: WARNING
              description: 'It recovers when it is below 80% of the `{$IF.ERRORS.WARN:"{#IFNAME}"}` threshold.'
              manual_close: 'YES'
              dependencies:
                - name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows laptop by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_expression: 'last(/Windows laptop by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: availability
          graph_prototypes:
            - uuid: 8392189919aa400c9bd956b91aee3bfc
              name: 'Interface {#IFNAME}({#IFALIAS}): Network traffic'
              graph_items:
                - drawtype: GRADIENT_LINE
                  color: 199C0D
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'net.if.in["{#IFGUID}"]'
                - sortorder: '1'
                  drawtype: BOLD_LINE
                  color: F63100
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'net.if.out["{#IFGUID}"]'
                - sortorder: '2'
                  color: 00611C
                  yaxisside: RIGHT
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'net.if.out["{#IFGUID}",errors]'
                - sortorder: '3'
                  color: F7941D
                  yaxisside: RIGHT
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'net.if.in["{#IFGUID}",errors]'
                - sortorder: '4'
                  color: FC6EA3
                  yaxisside: RIGHT
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'net.if.out["{#IFGUID}",dropped]'
                - sortorder: '5'
                  color: 6C59DC
                  yaxisside: RIGHT
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'net.if.in["{#IFGUID}",dropped]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(net){
                  	return {
                  		"{#IFNAME}": net.Name,
                  		"{#IFDESCR}": net.Description,
                  		"{#IFALIAS}": net.NetConnectionID,
                  		"{#IFGUID}": net.GUID
                  	}})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 3444b695dced4486add7a848d7c72288
          name: 'Physical disks discovery'
          key: 'perf_instance_en.discovery[PhysicalDisk]'
          delay: 1h
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVNAME}'
                value: '{$VFS.DEV.DEVNAME.MATCHES}'
                formulaid: A
              - macro: '{#DEVNAME}'
                value: '{$VFS.DEV.DEVNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
          description: 'Discovery of installed physical disks.'
          item_prototypes:
            - uuid: 66d91c1ed43e46daa1476a66be213d11
              name: '{#DEVNAME}: Disk utilization by idle time'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\% Idle Time",60]'
              history: 7d
              value_type: FLOAT
              units: '%'
              description: 'This item is the percentage of elapsed time that the selected disk drive was busy servicing read or writes requests based on idle time.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - 'return (100 - value)'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
              trigger_prototypes:
                - uuid: b8716fe825e0496fb0443f16d9d3efd0
                  expression: 'min(/Windows laptop by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\% Idle Time",60],15m)>{$VFS.DEV.UTIL.MAX.WARN}'
                  name: '{#DEVNAME}: Disk is overloaded'
                  event_name: '{#DEVNAME}: Disk is overloaded (util > {$VFS.DEV.UTIL.MAX.WARN}% for 15m)'
                  priority: WARNING
                  description: 'The disk appears to be under heavy load.'
                  manual_close: 'YES'
                  dependencies:
                    - name: '{#DEVNAME}: Disk read request responses are too high'
                      expression: 'min(/Windows laptop by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60],15m) > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"}'
                    - name: '{#DEVNAME}: Disk write request responses are too high'
                      expression: 'min(/Windows laptop by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60],15m) > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: f50d24d92d7c447a952dadf4f10ccf24
              name: '{#DEVNAME}: Average disk read queue length'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Read Queue Length",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              description: 'Average disk read queue, the number of requests outstanding on the disk at the time the performance data is collected.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: 005ffc7350b14ef6b36e69864a59b31c
              name: '{#DEVNAME}: Disk read request avg waiting time'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60]'
              history: 7d
              value_type: FLOAT
              units: s
              description: 'The average time for read requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
              trigger_prototypes:
                - uuid: e543425f8dae4951b841ea5265a805f3
                  expression: 'min(/Windows laptop by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60],15m) > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"}'
                  name: '{#DEVNAME}: Disk read request responses are too high'
                  event_name: '{#DEVNAME}: Disk read request responses are too high (read > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"}s for 15m)'
                  priority: WARNING
                  description: 'This trigger might indicate the disk {#DEVNAME} saturation.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: a0fddfcb5b9a4ead908f5f056fce2947
              name: '{#DEVNAME}: Disk write request avg waiting time'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60]'
              history: 7d
              value_type: FLOAT
              units: s
              description: 'The average time for write requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
              trigger_prototypes:
                - uuid: 7e8ac520d84a4972b5e0fe760b5d2ee8
                  expression: 'min(/Windows laptop by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60],15m) > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}'
                  name: '{#DEVNAME}: Disk write request responses are too high'
                  event_name: '{#DEVNAME}: Disk write request responses are too high (write > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}s for 15m)'
                  priority: WARNING
                  description: 'This trigger might indicate the disk {#DEVNAME} saturation.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 89bafd27b2d8484f9ee6fddc7a6f1907
              name: '{#DEVNAME}: Average disk write queue length'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Write Queue Length",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              description: 'Average disk write queue, the number of requests outstanding on the disk at the time the performance data is collected.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: 714cc375ae57470c82f243251318b4a7
              name: '{#DEVNAME}: Disk average queue size (avgqu-sz)'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Current Disk Queue Length",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              description: 'The current average disk queue; the number of requests outstanding on the disk while the performance data is being collected.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: c205d9e8f8cf484db555e9570e10c185
              name: '{#DEVNAME}: Disk read rate'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Reads/sec",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              units: '!r/s'
              description: 'Rate of read operations on the disk.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: b3f0c65d20bc4d8a950d59cf1cdd02f3
              name: '{#DEVNAME}: Disk write rate'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Writes/sec",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              units: '!w/s'
              description: 'Rate of write operations on the disk.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
          graph_prototypes:
            - uuid: ecf5e745cc88479ba7146b77d4641855
              name: '{#DEVNAME}: Disk average queue length'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Read Queue Length",60]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Write Queue Length",60]'
            - uuid: 59b8968fb7534c9a867fa751320b7104
              name: '{#DEVNAME}: Disk average waiting time'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60]'
                - sortorder: '1'
                  drawtype: GRADIENT_LINE
                  color: F63100
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60]'
            - uuid: 4349ed9e38ae4c9eb449ed1bdbf184d9
              name: '{#DEVNAME}: Disk read/write rates'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Reads/sec",60]'
                - sortorder: '1'
                  drawtype: GRADIENT_LINE
                  color: F63100
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Writes/sec",60]'
            - uuid: 576de7a36d514d0f937f080030a125ad
              name: '{#DEVNAME}: Disk utilization and queue'
              graph_items:
                - color: 199C0D
                  yaxisside: RIGHT
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Current Disk Queue Length",60]'
                - sortorder: '1'
                  drawtype: GRADIENT_LINE
                  color: F63100
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\% Idle Time",60]'
          preprocessing:
            - type: STR_REPLACE
              parameters:
                - '{#INSTANCE}'
                - '{#DEVNAME}'
        - uuid: 67730e79f48b4b028660e264b2eda371
          name: 'Power sensors discovery'
          type: DEPENDENT
          key: power.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSOR_TYPE}'
                value: Power
                formulaid: A
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: da3517ce058844c484e562b8c2682024
              name: '{#SENSOR_NAME}: потребляемая мощность'
              type: DEPENDENT
              key: 'power.sensor["{#SENSOR_ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: W
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              tags:
                - tag: component
                  value: power
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      // Паттерн для строки вида "/brand/n/power/m"
                      var pattern = /.*\/([^\/]+)\/(\d+)\/power\/(\d+)/;
                      var match = inputString.match(pattern);
                  
                      if (match) {
                          var brand = match[1].toLowerCase(); // Получаем бренд и приводим к нижнему регистру
                          var n = parseInt(match[2], 10);
                          var m = parseInt(match[3], 10);
                          var newN = n + 1;
                  
                          // Формирование строки в зависимости от условий
                          if (brand === "amd") {
                              brand = "AMD";
                          } else if (brand.startsWith("gpu-")) {
                              brand = brand.slice(4); // Убираем "gpu-" из начала строки
                              brand = brand.charAt(0).toUpperCase() + brand.slice(1); // Первая буква в верхнем регистре
                          } else {
                              brand = brand.charAt(0).toUpperCase() + brand.slice(1);
                          }
                  
                          // Формирование и возврат результата
                          if (m === 0) {
                              return brand + " CPU №" + newN;
                          } else {
                              return brand + " CPU №" + newN + " Core №" + m;
                          }
                      }
                  
                      // Возвращаем исходную строку, если никаких замен не произошло
                      return inputString;
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#SENSOR_NAME}": replaceString(sensor.Identifier),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 6816bb6683674fe08dea3e19aec3cef7
          name: 'Обнаружение модулей RAM'
          type: DEPENDENT
          key: ram_discovery
          delay: '0'
          item_prototypes:
            - uuid: 4354f58b50b14c47a7bdb57c1debbd1b
              name: 'Модуль RAM {#RAM_PART_NUMBER}: атрибуты'
              type: DEPENDENT
              key: 'ram_attributes["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Attributes.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 151696521a7740f09f13a8b57193ea63
              name: 'Модуль RAM {#RAM_PART_NUMBER}: слот'
              type: DEPENDENT
              key: 'ram_bank_label["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].BankLabel.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: d656dee9bbce490d84e4960287df5372
              name: 'Модуль RAM {#RAM_PART_NUMBER}: объём'
              type: DEPENDENT
              key: 'ram_capacity["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Capacity.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 72d1b4be51a54987be65ef04b9331a10
              name: 'Модуль RAM {#RAM_PART_NUMBER}: частота'
              type: DEPENDENT
              key: 'ram_configured_clock_speed["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].ConfiguredClockSpeed.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 249c57e5f4fd45f9ae8e542843646c82
              name: 'Модуль RAM {#RAM_PART_NUMBER}: напряжение'
              type: DEPENDENT
              key: 'ram_configured_voltage["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: V
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].ConfiguredVoltage.first()'
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 2b4cef91133f45f29de75ccd940247c8
              name: 'Модуль RAM {#RAM_PART_NUMBER}: форм-фактор памяти'
              type: DEPENDENT
              key: 'ram_form_factor["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].FormFactor.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 50c33ef4f1b74cc39f00ce20e0048440
              name: 'Модуль RAM {#RAM_PART_NUMBER}: канал'
              type: DEPENDENT
              key: 'ram_locator["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].DeviceLocator.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: beefbb7b131948a2886be20bc79e943b
              name: 'Модуль RAM {#RAM_PART_NUMBER}: производитель'
              type: DEPENDENT
              key: 'ram_manufacturer["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Manufacturer.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: cb4ad1acb96c401b922bd389ecd5ea7b
              name: 'Модуль RAM {#RAM_PART_NUMBER}: тип памяти SMBIOS'
              type: DEPENDENT
              key: 'ram_SMBIOS_type["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].SMBIOSMemoryType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 7d607e076e844b3a9ebea44109fc156c
              name: 'Модуль RAM {#RAM_PART_NUMBER}: скорость'
              type: DEPENDENT
              key: 'ram_speed["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Speed.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 4c8be94329cd4b1b8a0c911d6f94ef3b
              name: 'Модуль RAM {#RAM_PART_NUMBER}: тип памяти'
              type: DEPENDENT
              key: 'ram_type["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].MemoryType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(ram){
                  	return {
                                  "{#RAM_PART_NUMBER}": ram.PartNumber.trim(),
                                  "{#RAM_SERIAL_NUMBER}": ram.SerialNumber
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: 024888e2e1dc43f7aa0b4204d9f10198
          name: 'Windows services discovery'
          key: service.discovery
          delay: 1h
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#SERVICE.NAME}'
                value: '{$SERVICE.NAME.MATCHES}'
                formulaid: A
              - macro: '{#SERVICE.NAME}'
                value: '{$SERVICE.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#SERVICE.STARTUPNAME}'
                value: '{$SERVICE.STARTUPNAME.MATCHES}'
                formulaid: C
              - macro: '{#SERVICE.STARTUPNAME}'
                value: '{$SERVICE.STARTUPNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
          description: 'Used for the discovery of Windows services of different types as defined in the template''s macros.'
          item_prototypes:
            - uuid: 87613c2f954d458d8924541da0cc2127
              name: 'State of service "{#SERVICE.NAME}" ({#SERVICE.DISPLAYNAME})'
              key: 'service.info["{#SERVICE.NAME}",state]'
              history: 7d
              tags:
                - tag: component
                  value: system
                - tag: name
                  value: '{#SERVICE.DISPLAYNAME}'
                - tag: service
                  value: '{#SERVICE.NAME}'
              trigger_prototypes:
                - uuid: aa4b5bb46a8e481b877e81d558ab77a1
                  expression: 'min(/Windows laptop by WMI/service.info["{#SERVICE.NAME}",state],#3)<>0'
                  name: '"{#SERVICE.NAME}" ({#SERVICE.DISPLAYNAME}) is not running'
                  event_name: '"{#SERVICE.NAME}" ({#SERVICE.DISPLAYNAME}) is not running (startup type {#SERVICE.STARTUPNAME})'
                  priority: AVERAGE
                  description: 'The service has a state other than "Running" for the last three times.'
                  tags:
                    - tag: scope
                      value: notice
        - uuid: 560b451bd3184e3791dd0e8ad80d9810
          name: 'SmallData sensors discovery'
          type: DEPENDENT
          key: smalldata.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSOR_NAME}'
                value: 'GPU Memory Total'
                formulaid: A
              - macro: '{#SENSOR_NAME}'
                value: 'GPU Memory Used'
                formulaid: B
              - macro: '{#SENSOR_TYPE}'
                value: SmallData
                formulaid: C
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: 8db8162447f34f43bc6ade0b635adc93
              name: '{#DEVICE} {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'small_data[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1048576'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function containsDisks(str) {
                      const disks = ['hdd', 'ssd', 'nvme'];
                      return disks.some(function(disk) {
                          return str.includes(disk);
                      });
                  }
                  
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                          else{
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[1]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU " + cpuBrand + " №" + incrementedNumber;
                      }
                      else if (containsDisks(target)) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск №" + incrementedNumber + " " + uppercasedTarget;
                      }  
                      
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(small_data){
                      return {
                          "{#SENSOR_ID}": small_data.Identifier,
                          "{#DEVICE}": replaceString(small_data.Identifier),
                          "{#SENSOR_NAME}": small_data.Name,
                          "{#SENSOR_TYPE}": small_data.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 8fd718caaf8941ad95ab18d42b72804e
          name: 'Датчики температуры'
          type: DEPENDENT
          key: temperatures_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: CPU
                operator: NOT_MATCHES_REGEX
                formulaid: A
              - macro: '{#DEVICE}'
                value: GPU
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#DEVICE}'
                value: HDD
                operator: NOT_MATCHES_REGEX
                formulaid: C
              - macro: '{#DEVICE}'
                value: LPC
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#DEVICE}'
                value: NVME
                operator: NOT_MATCHES_REGEX
                formulaid: E
              - macro: '{#DEVICE}'
                value: SSD
                operator: NOT_MATCHES_REGEX
                formulaid: F
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: G
          lifetime: 30d
          item_prototypes:
            - uuid: e8c13e7c5418433198773e02747b6d67
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                          else{
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else if (target.includes("hdd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget;
                      }  
                      else if (target.includes("ssd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - SATA " + uppercasedTarget;
                      }
                      else if (target.includes("nvme")) {
                          const uppercasedExceptLast = target.slice(0, -1).toUpperCase();
                          const lastChar = target.slice(-1);
                          const uppercasedTarget = uppercasedExceptLast + lastChar;
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget + " SSD";
                      }
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  function replaceName(inputString) {
                      if (inputString.match(/CPU Core #(\d+) Distance to TjMax/)) {
                          return "Distance to TjMax";
                      }
                      if (inputString.includes("CPU Core")) {
                           return inputString.split("CPU")[1] + " Temperature";
                      }
                      else if (inputString.includes("GPU")) {
                           return inputString.split('GPU')[1] + " Temperature";
                      }
                      else if (inputString.includes("CPU")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("Core")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("(Tdie)")) {
                           return inputString + " Temperature";
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": replaceName(sensor.Name),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 654954dbcda24efc88c18f0456871d8b
          name: 'Mounted filesystem discovery'
          type: DEPENDENT
          key: vfs.fs.dependent.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#FSDRIVETYPE}'
                value: '{$VFS.FS.FSDRIVETYPE.MATCHES}'
                formulaid: A
              - macro: '{#FSDRIVETYPE}'
                value: '{$VFS.FS.FSDRIVETYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#FSNAME}'
                value: '{$VFS.FS.FSNAME.MATCHES}'
                formulaid: C
              - macro: '{#FSNAME}'
                value: '{$VFS.FS.FSNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#FSTYPE}'
                value: '{$VFS.FS.FSTYPE.MATCHES}'
                formulaid: E
              - macro: '{#FSTYPE}'
                value: '{$VFS.FS.FSTYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: F
          description: 'Discovery of filesystems of different types.'
          item_prototypes:
            - uuid: 52602c935edf4b5eab2aa2ff4f6407ea
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Available'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},free]'
              delay: '0'
              history: 7d
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              description: 'Available storage space expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.free
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
            - uuid: 01afdf835a9540a4b7984a8b3fb57ac1
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Used, in %'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},pused]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '%'
              description: 'Calculated as the percentage of currently used space compared to the maximum available space.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.pused
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
              trigger_prototypes:
                - uuid: eda9ab4c1df54a1080d853c06beb6f40
                  expression: 'min(/Windows laptop by WMI/vfs.fs.dependent.size[{#FSNAME},pused],5m)>{$VFS.FS.PUSED.MAX.CRIT:"{#FSLABEL}({#FSNAME})"}'
                  name: 'FS [{#FSLABEL}({#FSNAME})]: Space is critically low'
                  event_name: 'FS [{#FSLABEL}({#FSNAME})]: Space is critically low (used > {$VFS.FS.PUSED.MAX.CRIT:"{#FSLABEL}({#FSNAME})"}%, total {{?last(//vfs.fs.dependent.size[{#FSNAME},total])/1024/1024/1024}.fmtnum(1)}GB)'
                  opdata: 'Space used: {{ITEM.LASTVALUE1}.fmtnum(1)}%'
                  priority: AVERAGE
                  description: |
                    The volume's space usage exceeds the `{$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}%` limit.
                    The trigger expression is based on the current used and maximum available spaces.
                    Event name represents the total volume space, which can differ from the maximum available space, depending on the filesystem type.
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
                    - tag: scope
                      value: capacity
                - uuid: 8e2bedfa61c44d3098260c10d1388316
                  expression: 'min(/Windows laptop by WMI/vfs.fs.dependent.size[{#FSNAME},pused],5m)>{$VFS.FS.PUSED.MAX.WARN:"{#FSLABEL}({#FSNAME})"}'
                  name: 'FS [{#FSLABEL}({#FSNAME})]: Space is low'
                  event_name: 'FS [{#FSLABEL}({#FSNAME})]: Space is low (used > {$VFS.FS.PUSED.MAX.WARN:"{#FSLABEL}({#FSNAME})"}%, total {{?last(//vfs.fs.dependent.size[{#FSNAME},total])/1024/1024/1024}.fmtnum(1)}GB)'
                  opdata: 'Space used: {{ITEM.LASTVALUE1}.fmtnum(1)}%'
                  priority: WARNING
                  description: |
                    The volume's space usage exceeds the `{$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}%` limit.
                    The trigger expression is based on the current used and maximum available spaces.
                    Event name represents the total volume space, which can differ from the maximum available space, depending on the filesystem type.
                  manual_close: 'YES'
                  dependencies:
                    - name: 'FS [{#FSLABEL}({#FSNAME})]: Space is critically low'
                      expression: 'min(/Windows laptop by WMI/vfs.fs.dependent.size[{#FSNAME},pused],5m)>{$VFS.FS.PUSED.MAX.CRIT:"{#FSLABEL}({#FSNAME})"}'
                  tags:
                    - tag: scope
                      value: availability
                    - tag: scope
                      value: capacity
            - uuid: 186c4d0829ed4705af9983052c68354a
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Total'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},total]'
              delay: '0'
              history: 7d
              units: B
              description: 'Total space expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.total
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
            - uuid: 6d4fbb12bf4c4f25b62fdef958e99b1d
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Used'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},used]'
              delay: '0'
              history: 7d
              units: B
              description: 'Used storage expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.used
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
            - uuid: c2eb99a38618492996eb0f73024570db
              name: 'FS [{#FSLABEL}({#FSNAME})]: Get data'
              type: DEPENDENT
              key: 'vfs.fs.dependent[{#FSNAME},data]'
              delay: '0'
              history: '0'
              value_type: TEXT
              trends: '0'
              description: 'Intermediate data of `{#FSNAME}` filesystem.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.fsname==''{#FSNAME}'')].first()'
              master_item:
                key: vfs.fs.get
              tags:
                - tag: component
                  value: raw
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
          graph_prototypes:
            - uuid: a860691ee80249e68033d9696b938b1f
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space usage graph, in %'
              width: '600'
              height: '340'
              ymin_type_1: FIXED
              ymax_type_1: FIXED
              graph_items:
                - drawtype: FILLED_REGION
                  color: F63100
                  calc_fnc: LAST
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},pused]'
            - uuid: afd8731e77f3403ca5da2828c6691bf9
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space utilization chart'
              width: '600'
              height: '340'
              type: PIE
              show_3d: 'YES'
              graph_items:
                - color: '787878'
                  calc_fnc: LAST
                  type: GRAPH_SUM
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},total]'
                - sortorder: '1'
                  color: F63100
                  calc_fnc: LAST
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},used]'
                - sortorder: '2'
                  color: 199C09
                  calc_fnc: LAST
                  item:
                    host: 'Windows laptop by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},free]'
          master_item:
            key: vfs.fs.get
          lld_macro_paths:
            - lld_macro: '{#FSDRIVETYPE}'
              path: $.fsdrivetype
            - lld_macro: '{#FSLABEL}'
              path: $.fslabel
            - lld_macro: '{#FSNAME}'
              path: $.fsname
            - lld_macro: '{#FSTYPE}'
              path: $.fstype
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var filesystems = JSON.parse(value);
                  
                  result = filesystems.map(function (filesystem) {
                  	return {
                  		'fsname': filesystem.fsname,
                  		'fstype': filesystem.fstype,
                  		'fslabel': filesystem.fslabel,
                  		'fsdrivetype': filesystem.fsdrivetype
                  	};
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: da6feead6d5141458c1ad7aa78ee4862
          name: 'Voltage sensors discovery'
          type: DEPENDENT
          key: voltage.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSORTYPE}'
                value: Voltage
                formulaid: A
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: 1d8f72dc977043d89d5e76b8b1787c1e
              name: '{#SENSORNAME} ({#SENSORPARENT}): {#SENSORTYPE}'
              type: DEPENDENT
              key: 'voltage.sensor["{#SENSORPATH}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: V
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.InstanceId == "{#SENSORID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              tags:
                - tag: component
                  value: voltage
                - tag: sensor
                  value: '{#SENSORPARENT}'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSORID}": sensor.InstanceId,
                          "{#SENSORPATH}": sensor.Identifier,
                          "{#SENSORNAME}": sensor.Name,
                          "{#SENSORTYPE}": sensor.SensorType,
                          "{#SENSORPARENT}": sensor.Parent
                      }})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
  triggers:
    - uuid: 14b8ecae9f244accab465ba148f35839
      expression: 'max(/Windows laptop by WMI/system.swap.pfree,5m)<{$SWAP.PFREE.MIN.WARN} and last(/Windows laptop by WMI/system.swap.size[,total])>0'
      name: 'High swap space usage'
      event_name: 'High swap space usage (less than {$SWAP.PFREE.MIN.WARN}% free)'
      opdata: 'Free: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}'
      priority: WARNING
      description: 'This trigger is ignored, if there is no swap configured'
      dependencies:
        - name: 'High memory utilization'
          expression: 'min(/Windows laptop by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
      tags:
        - tag: scope
          value: performance
  graphs:
    - uuid: ac01a9ce7a5243a28aed8293615359e7
      name: 'Windows: CPU jumps'
      graph_items:
        - color: 199C0D
          item:
            host: 'Windows laptop by WMI'
            key: 'perf_counter_en["\System\Context Switches/sec"]'
        - sortorder: '1'
          color: F63100
          item:
            host: 'Windows laptop by WMI'
            key: 'perf_counter_en["\Processor Information(_total)\% Interrupt Time"]'
    - uuid: f5858aba13934c0fa94df83c5b3e2404
      name: 'Windows: CPU usage'
      type: STACKED
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        - color: 199C0D
          item:
            host: 'Windows laptop by WMI'
            key: 'perf_counter_en["\Processor Information(_total)\% User Time"]'
        - sortorder: '1'
          color: F63100
          item:
            host: 'Windows laptop by WMI'
            key: 'perf_counter_en["\Processor Information(_total)\% Privileged Time"]'
    - uuid: 2eb2cd2c84184286b60087bf77c3dccc
      name: 'Windows: CPU utilization'
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'Windows laptop by WMI'
            key: system.cpu.util
    - uuid: 2fe77b3e7b3a49e39f3f171f8f9d5ffe
      name: 'Windows: Memory utilization'
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'Windows laptop by WMI'
            key: vm.memory.util
    - uuid: 37221194fc5648d188dd899789d50834
      name: 'Windows: Swap usage'
      graph_items:
        - color: 199C0D
          item:
            host: 'Windows laptop by WMI'
            key: system.swap.free
        - sortorder: '1'
          color: F63100
          item:
            host: 'Windows laptop by WMI'
            key: 'system.swap.size[,total]'
