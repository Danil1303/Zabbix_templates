zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: 1726a90674da432b878ef9742568d1d7
      name: 'by d.bogach/Мониторинг Windows'
  templates:
    - uuid: 43c571e597c14835aaef626af5c87438
      template: 'Windows PC by WMI'
      name: 'WIndows ПК'
      groups:
        - name: 'by d.bogach/Мониторинг Windows'
      items:
        - uuid: 85bf79d4a35a441b95ed3abf2ee7a5ac
          name: 'Host name of Zabbix agent running'
          key: agent.hostname
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: system
        - uuid: 4c08772ea218444b8e5eb309fae1c696
          name: 'Version of Zabbix agent running'
          key: agent.version
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: application
        - uuid: af04a99b0a3d47dbaaf5fe8467e34e68
          name: 'BIOS: подпись'
          type: DEPENDENT
          key: bios_caption
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Caption
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: a8a9d583924d44afb0089b0fdc5deeb5
          name: 'BIOS: характеристики'
          type: DEPENDENT
          key: bios_characteristics
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          description: |
            Reserved (0)
            Reserved (1)
            Unknown (2)
            BIOS Characteristics Not Supported (3)
            ISA is supported (4)
            MCA is supported (5)
            EISA is supported (6)
            PCI is supported (7)
            PC Card (PCMCIA) is supported (8)
            Plug and Play is supported (9)
            APM is supported (10)
            BIOS is Upgradeable (Flash) (11)
            BIOS is Upgradable (Flash)
            BIOS shadowing is allowed (12)
            VL-VESA is supported (13)
            ESCD support is available (14)
            Boot from CD is supported (15)
            Selectable Boot is supported (16)
            BIOS ROM is socketed (17)
            Boot From PC Card (PCMCIA) is supported (18)
            EDD (Enhanced Disk Drive) Specification is supported (19)
            Int 13h - Japanese Floppy for NEC 9800 1.2mb (3.5\", 1k Bytes/Sector, 360 RPM) is supported (20)
            Int 13h - Japanese Floppy for NEC 9800 1.2mb (3.5, 1k Bytes/Sector, 360 RPM) is supported
            Int 13h - Japanese Floppy for Toshiba 1.2mb (3.5\", 360 RPM) is supported (21)
            Int 13h - Japanese Floppy for Toshiba 1.2mb (3.5, 360 RPM) is supported
            Int 13h - 5.25\" / 360 KB Floppy Services are supported (22)
            Int 13h - 5.25 / 360 KB Floppy Services are supported
            Int 13h - 5.25\" /1.2MB Floppy Services are supported (23)
            Int 13h - 5.25 /1.2MB Floppy Services are supported
            Int 13h - 3.5\" / 720 KB Floppy Services are supported (24)
            Int 13h - 3.5 / 720 KB Floppy Services are supported
            Int 13h - 3.5\" / 2.88 MB Floppy Services are supported (25)
            Int 13h - 3.5 / 2.88 MB Floppy Services are supported
            Int 5h, Print Screen Service is supported (26)
            Int 9h, 8042 Keyboard services are supported (27)
            Int 14h, Serial Services are supported (28)
            Int 17h, printer services are supported (29)
            Int 10h, CGA/Mono Video Services are supported (30)
            NEC PC-98 (31)
            ACPI supported (32)
            ACPI is supported
            USB Legacy is supported (33)
            AGP is supported (34)
            I2O boot is supported (35)
            LS-120 boot is supported (36)
            ATAPI ZIP Drive boot is supported (37)
            1394 boot is supported (38)
            Smart Battery supported (39)
            Smart Battery is supported
            40 47
            Reserved for BIOS vendor
            48 63
            Reserved for system vendor
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..BiosCharacteristics
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 4d9a3f6df2464678bdc06ec7c982026d
          name: 'BIOS: текущий язык'
          type: DEPENDENT
          key: bios_current_language
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..CurrentLanguage
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: f3a71c87dde0447cb73126d4cbe71aba
          name: 'BIOS: описание'
          type: DEPENDENT
          key: bios_description
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Description
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 59bfa012c02d47e6bb98f6de429828ae
          name: 'BIOS: список поддерживаемых языков'
          type: DEPENDENT
          key: bios_list_of_languages
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..ListOfLanguages
            - type: TRIM
              parameters:
                - '[]'
            - type: STR_REPLACE
              parameters:
                - '"'
                - ''
            - type: STR_REPLACE
              parameters:
                - ','
                - ', '
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 79307667687a4a8391f4dfc528e86f87
          name: 'BIOS: производитель'
          type: DEPENDENT
          key: bios_manufacturer
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Manufacturer
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 36bec2f875814bb6875afd54bde79e48
          name: 'BIOS: имя'
          type: DEPENDENT
          key: bios_name
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Name
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 49d72213fa124e989b9e51d432e0b3a3
          name: 'BIOS: основной BIOS'
          type: DEPENDENT
          key: bios_primary
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..PrimaryBIOS
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 7054cc7205a044c2b60129e0e7d09728
          name: 'BIOS: дата релиза'
          type: DEPENDENT
          key: bios_release_date
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..ReleaseDate
            - type: TRIM
              parameters:
                - '[]"'
            - type: REGEX
              parameters:
                - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                - '\3.\2.\1 \4:\5:\6'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: c7b77f343ff84dfbabb85ef6c0aa0014
          name: 'BIOS: серийный номер'
          type: DEPENDENT
          key: bios_serial_number
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..SerialNumber
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 3bf26c76d1b947489e3ec2c281542c56
          name: 'BIOS: статус программного элемента'
          type: DEPENDENT
          key: bios_software_element_state
          delay: '0'
          history: 1d
          trends: '0'
          status: DISABLED
          description: |
            Deployable (0)
            Installable (1)
            Executable (2)
            Running (3)
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..SoftwareElementState
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 63b7dc63bea24068b88341ca71373e65
          name: 'BIOS: статус'
          type: DEPENDENT
          key: bios_status
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          description: |
            OK ("OK")
            Error ("Error")
            Degraded ("Degraded")
            Unknown ("Unknown")
            Pred Fail ("Pred Fail")
            Starting ("Starting")
            Stopping ("Stopping")
            Service ("Service")
            Stressed ("Stressed")
            NonRecover ("NonRecover")
            No Contact ("No Contact")
            Lost Comm ("Lost Comm")
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Status
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: c1f6f0920c734477932e51af88f7e793
          name: 'BIOS: целевая ОС'
          type: DEPENDENT
          key: bios_target_operating_system
          delay: '0'
          history: 1d
          trends: '0'
          status: DISABLED
          description: |
            Unknown (0)
            Other (1)
            MACOS (2)
            ATTUNIX (3)
            DGUX (4)
            DECNT (5)
            Digital Unix (6)
            OpenVMS (7)
            HPUX (8)
            AIX (9)
            MVS (10)
            OS400 (11)
            OS/2 (12)
            JavaVM (13)
            MSDOS (14)
            WIN3x (15)
            WIN95 (16)
            WIN98 (17)
            WINNT (18)
            WINCE (19)
            NCR3000 (20)
            NetWare (21)
            OSF (22)
            DC/OS (23)
            Reliant UNIX (24)
            SCO UnixWare (25)
            SCO OpenServer (26)
            Sequent (27)
            IRIX (28)
            Solaris (29)
            SunOS (30)
            U6000 (31)
            ASERIES (32)
            TandemNSK (33)
            TandemNT (34)
            BS2000 (35)
            LINUX (36)
            Lynx (37)
            XENIX (38)
            VM/ESA (39)
            Interactive UNIX (40)
            BSDUNIX (41)
            FreeBSD (42)
            NetBSD (43)
            GNU Hurd (44)
            OS9 (45)
            MACH Kernel (46)
            Inferno (47)
            QNX (48)
            EPOC (49)
            IxWorks (50)
            VxWorks (51)
            MiNT (52)
            BeOS (53)
            HP MPE (54)
            NextStep (55)
            PalmPilot (56)
            Rhapsody (57)
            Windows 2000 (58)
            Dedicated (59)
            VSE (60)
            TPF (61)
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..TargetOperatingSystem
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: c8e97e1f1a614a07a8e1786560bc807d
          name: 'BIOS: версия'
          type: DEPENDENT
          key: bios_version
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Version
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: 1777d79087b5405399bd7583a973c2f3
          name: 'BIOS: полная версия'
          type: DEPENDENT
          key: bios_version_all
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..BIOSVersion
            - type: TRIM
              parameters:
                - '[]'
            - type: STR_REPLACE
              parameters:
                - '"'
                - ''
            - type: STR_REPLACE
              parameters:
                - ','
                - ', '
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
        - uuid: d18ef662b3b34fbea08d3e07ed3a1e0c
          name: 'Доступность ICMP'
          type: SIMPLE
          key: icmpping
          history: 1w
          trends: 30d
          triggers:
            - uuid: 172023d8762d4d7399a989849e1f6064
              expression: 'max(/Windows PC by WMI/icmpping,#3)=0'
              name: 'Компьютер выключен'
        - uuid: 6b77373d686d46e3beb7e1c7d359ebc2
          name: 'ОС Windows'
          type: DEPENDENT
          key: os_caption
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Caption
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 0fb230f3492b4bc2be363b3270b6bc83
          name: 'ОС Windows: дата установки'
          type: DEPENDENT
          key: os_install_date
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..InstallDate
            - type: TRIM
              parameters:
                - '[]"'
            - type: REGEX
              parameters:
                - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                - '\3.\2.\1 \4:\5:\6'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 7b7e1cefb18b4d07a87ae558c9f32e4a
          name: 'ОС Windows: дата последнего запуска'
          type: DEPENDENT
          key: os_last_boot_time
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..LastBootUpTime
            - type: TRIM
              parameters:
                - '[]"'
            - type: REGEX
              parameters:
                - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                - '\3.\2.\1 \4:\5:\6'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: c25f9caee2e2499fa630032fd87d0df9
          name: 'ОС Windows: зарегистрированный пользователь'
          type: DEPENDENT
          key: os_registered_user
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..RegisteredUser
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 89a6985b406749b7b67526ca5cacbf20
          name: 'ОС Windows: серийный номер'
          type: DEPENDENT
          key: os_serial_number
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..SerialNumber
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 72728cb43c3c4aeb884eb3eab75a94cf
          name: 'ОС Windows: статус'
          type: DEPENDENT
          key: os_status
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Status
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 231bda12e4b2442ba3ee031ab5e0cf11
          name: 'ОС Windows: версия'
          type: DEPENDENT
          key: os_version
          delay: '0'
          history: 1d
          value_type: TEXT
          trends: '0'
          status: DISABLED
          preprocessing:
            - type: JSONPATH
              parameters:
                - $..Version
            - type: TRIM
              parameters:
                - '[]"'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 12h
          master_item:
            key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
        - uuid: 73e676fc8a454c39b8f707171e61ead9
          name: 'Cache bytes'
          key: 'perf_counter_en["\Memory\Cache Bytes"]'
          history: 7d
          status: DISABLED
          units: B
          description: 'Cache Bytes is the sum of the Memory\\System Cache Resident Bytes, Memory\\System Driver Resident Bytes, Memory\\System Code Resident Bytes, and Memory\\Pool Paged Resident Bytes counters. This counter displays the last observed value only; it is not an average.'
          tags:
            - tag: component
              value: memory
        - uuid: fb7092b2e87841989e1b353f41bbe3fc
          name: 'Free system page table entries'
          key: 'perf_counter_en["\Memory\Free System Page Table Entries"]'
          history: 7d
          status: DISABLED
          description: 'This indicates the number of page table entries not currently in use by the system. If the number is less than 5,000, there may be a memory leak or you running out of memory.'
          tags:
            - tag: component
              value: memory
          triggers:
            - uuid: ca6efddbbde5446eab905ed528049d35
              expression: 'max(/Windows PC by WMI/perf_counter_en["\Memory\Free System Page Table Entries"],5m)<{$MEM.PAGE_TABLE_CRIT.MIN}'
              name: 'Number of free system page table entries is too low'
              event_name: 'Number of free system page table entries is too low (less {$MEM.PAGE_TABLE_CRIT.MIN} for 5m)'
              priority: WARNING
              description: '`Memory\Free System Page Table Entries` has been less than `{$MEM.PAGE_TABLE_CRIT.MIN}` for 5 minutes. If the number is less than 5,000, there may be a memory leak.'
              dependencies:
                - name: 'High memory utilization'
                  expression: 'min(/Windows PC by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
              tags:
                - tag: scope
                  value: capacity
        - uuid: f8b9804b247b4737ba67a903e3a333b3
          name: 'Memory page faults per second'
          key: 'perf_counter_en["\Memory\Page Faults/sec"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: 'Page Faults/sec is the average number of pages faulted per second. It is measured in number of pages faulted per second because only one page is faulted in each fault operation, hence this is also equal to the number of page fault operations. This counter includes both hard faults (those that require disk access) and soft faults (where the faulted page is found elsewhere in physical memory.) Most processors can handle large numbers of soft faults without significant consequence. However, hard faults, which require disk access, can cause significant delays.'
          tags:
            - tag: component
              value: memory
        - uuid: 74e9c9e20dab4bedbc1792dd5ec608a2
          name: 'Memory pages per second'
          key: 'perf_counter_en["\Memory\Pages/sec"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: |
            This measures the rate at which pages are read from or written to disk to resolve hard page faults.
            If the value is greater than 1,000, as a result of excessive paging, there may be a memory leak.
          tags:
            - tag: component
              value: memory
          triggers:
            - uuid: 6416765c34ad4e48aab7203a5cdeabb7
              expression: 'min(/Windows PC by WMI/perf_counter_en["\Memory\Pages/sec"],5m)>{$MEM.PAGE_SEC.CRIT.MAX}'
              name: 'The Memory Pages/sec is too high'
              event_name: 'The Memory Pages/sec is too high (over {$MEM.PAGE_SEC.CRIT.MAX} for 5m)'
              priority: WARNING
              description: 'The Memory Pages/sec in the last 5 minutes exceeds `{$MEM.PAGE_SEC.CRIT.MAX}`. If the value is greater than 1,000, as a result of excessive paging, there may be a memory leak.'
              dependencies:
                - name: 'High memory utilization'
                  expression: 'min(/Windows PC by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
              tags:
                - tag: scope
                  value: capacity
        - uuid: 1033dd27887f47dd9fbae15a4452138d
          name: 'Memory pool non-paged'
          key: 'perf_counter_en["\Memory\Pool Nonpaged Bytes"]'
          history: 7d
          status: DISABLED
          units: B
          description: |
            This measures the size, in bytes, of the non-paged pool. This is an area of system memory for objects that cannot be written to disk but instead must remain in physical memory as long as they are allocated.
            There is a possible memory leak if the value is greater than 175MB (or 100MB with the /3GB switch). Consequently, Event ID 2019 is recorded in the system event log.
          tags:
            - tag: component
              value: memory
        - uuid: bc35d76fb6e647c08d37220e965f5456
          name: 'Used swap space in %'
          key: 'perf_counter_en["\Paging file(_Total)\% Usage"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The used space of swap volume/file in percent.'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: 28ca8ac2419b469f8cd1542ef552c6d9
          name: 'CPU DPC time'
          key: 'perf_counter_en["\Processor Information(_total)\% DPC Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'Processor DPC time is the time that a single processor spent receiving and servicing deferred procedure calls (DPCs). DPCs are interrupts that run at a lower priority than standard interrupts. `% DPC Time` is a component of `% Privileged Time` because DPCs are executed in privileged mode. If a high `% DPC Time` is sustained, there may be a processor bottleneck or an application or hardware related issue that can significantly diminish overall system performance.'
          tags:
            - tag: component
              value: cpu
        - uuid: ddf4a580686349af90a3568cd27da899
          name: 'CPU interrupt time'
          key: 'perf_counter_en["\Processor Information(_total)\% Interrupt Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The processor information `% Interrupt Time` counter indicates how much time the processor spends handling hardware interrupts during sample intervals. It reflects the activity of devices like the system clock, mouse, disk drivers, and network cards. A value above 20% suggests possible hardware issues.'
          tags:
            - tag: component
              value: cpu
          triggers:
            - uuid: c15e852ba3b34c839482b957f907165b
              expression: 'min(/Windows PC by WMI/perf_counter_en["\Processor Information(_total)\% Interrupt Time"],5m)>{$CPU.INTERRUPT.CRIT.MAX}'
              name: 'CPU interrupt time is too high'
              event_name: 'CPU interrupt time is too high (over {$CPU.INTERRUPT.CRIT.MAX}% for 5m)'
              priority: WARNING
              description: 'The CPU Interrupt Time in the last 5 minutes exceeds `{$CPU.INTERRUPT.CRIT.MAX}`%.'
              dependencies:
                - name: 'High CPU utilization'
                  expression: 'min(/Windows PC by WMI/system.cpu.util,5m)>{$CPU.UTIL.CRIT}'
              tags:
                - tag: scope
                  value: performance
        - uuid: c9345e29ead84713a34bd30fbe750ff9
          name: 'CPU privileged time'
          key: 'perf_counter_en["\Processor Information(_total)\% Privileged Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The processor information `% Privileged Time` counter shows the percent of time that the processor is spent executing in Kernel (or Privileged) mode. Privileged mode includes services interrupts inside Interrupt Service Routines (ISRs), executing Deferred Procedure Calls (DPCs), Device Driver calls and other kernel-mode functions of the Windows Operating System.'
          tags:
            - tag: component
              value: cpu
          triggers:
            - uuid: 31243305f926435586bd7c451f42cb18
              expression: 'min(/Windows PC by WMI/perf_counter_en["\Processor Information(_total)\% Privileged Time"],5m)>{$CPU.PRIV.CRIT.MAX}'
              name: 'CPU privileged time is too high'
              event_name: 'CPU privileged time is too high (over {$CPU.PRIV.CRIT.MAX}% for 5m)'
              priority: WARNING
              description: 'The CPU privileged time in the last 5 minutes exceeds {$CPU.PRIV.CRIT.MAX}%.'
              dependencies:
                - name: 'CPU interrupt time is too high'
                  expression: 'min(/Windows PC by WMI/perf_counter_en["\Processor Information(_total)\% Interrupt Time"],5m)>{$CPU.INTERRUPT.CRIT.MAX}'
                - name: 'High CPU utilization'
                  expression: 'min(/Windows PC by WMI/system.cpu.util,5m)>{$CPU.UTIL.CRIT}'
              tags:
                - tag: scope
                  value: performance
        - uuid: 3c9265b1249542688c2bf2a196aeb59a
          name: 'CPU user time'
          key: 'perf_counter_en["\Processor Information(_total)\% User Time"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The processor information `% User Time` counter shows the percent of time that the processor(s) is spent executing in User mode.'
          tags:
            - tag: component
              value: cpu
        - uuid: d0ed2a6d08c14983b9a25298c5881225
          name: 'Context switches per second'
          key: 'perf_counter_en["\System\Context Switches/sec"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: |
            Context Switches/sec is the combined rate at which all processors on the computer are switched from one thread to another.
            Context switches occur when a running thread voluntarily relinquishes the processor, is preempted by a higher priority ready thread, or switches between user-mode and privileged (kernel) mode to use an Executive or subsystem service.
            It is the sum of Thread\\Context Switches/sec for all threads running on all processors in the computer and is measured in numbers of switches.
            There are context switch counters on the System and Thread objects. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
          tags:
            - tag: component
              value: cpu
        - uuid: 1e0db791473447de840a84a40596e6d9
          name: 'CPU queue length'
          key: 'perf_counter_en["\System\Processor Queue Length"]'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          description: 'The Processor Queue Length shows the number of threads that are observed as delayed in the processor Ready Queue and are waiting to be executed.'
          tags:
            - tag: component
              value: cpu
        - uuid: 98d2eb718da444a6b1d9e881768c57cc
          name: 'Number of threads'
          key: 'perf_counter_en["\System\Threads"]'
          history: 7d
          status: DISABLED
          description: 'The number of threads used by all running processes.'
          tags:
            - tag: component
              value: os
        - uuid: 416baccacf8f4e3c8d37e65ba703cfeb
          name: 'LibreHardwareMonitor proc num'
          key: 'proc.num[LibreHardwareMonitor.exe]'
          history: 1h
          trends: '0'
          triggers:
            - uuid: e92bc68329294eb1ad8145a61af9a7f5
              expression: 'last(/Windows PC by WMI/proc.num[LibreHardwareMonitor.exe])=0'
              name: 'Программа мониторинга не запущена'
              priority: AVERAGE
              tags:
                - tag: scope
                  value: availability
        - uuid: 4122b685e6604fa18020a14cd123992e
          name: 'Number of processes'
          key: 'proc.num[]'
          history: 7d
          status: DISABLED
          description: 'The number of processes.'
          tags:
            - tag: component
              value: os
        - uuid: 2a2d3457eb6444ccbf456f4c97d4a90a
          name: 'CPU utilization'
          key: system.cpu.util
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'CPU utilization expressed in %.'
          tags:
            - tag: component
              value: cpu
          triggers:
            - uuid: 33cb420ae0e0417ab5fc1773a8181ed2
              expression: 'min(/Windows PC by WMI/system.cpu.util,5m)>{$CPU.UTIL.CRIT}'
              name: 'High CPU utilization'
              event_name: 'High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)'
              opdata: 'Current utilization: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'CPU utilization is too high. The system might be slow to respond.'
              tags:
                - tag: scope
                  value: performance
        - uuid: 11a1254cb2d746feb657e2f499812bfd
          name: 'System name'
          key: system.hostname
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          description: 'The host name of the system.'
          inventory_link: NAME
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 93e7ec8f498345cd82bc028cb88fea51
              expression: 'change(/Windows PC by WMI/system.hostname) and length(last(/Windows PC by WMI/system.hostname))>0'
              name: 'System name has changed'
              event_name: 'System name has changed (new name: {ITEM.VALUE})'
              priority: INFO
              description: 'The name of the system has changed. Acknowledge to close the problem manually.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 0d7de93b666a4ae0901972c8703b9bf7
          name: 'System local time'
          key: system.localtime
          history: 7d
          units: unixtime
          description: 'The local system time of the host.'
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: eec6b36870fe4d6fb7523e63437dc830
              expression: 'fuzzytime(/Windows PC by WMI/system.localtime,{$SYSTEM.FUZZYTIME.MAX})=0'
              name: 'System time is out of sync'
              event_name: 'System time is out of sync (diff with Zabbix server > {$SYSTEM.FUZZYTIME.MAX}s)'
              priority: WARNING
              description: 'The host''s system time is different from Zabbix server time.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 484ec303e34541c9882dde95635f85e8
          name: 'Operating system architecture'
          key: system.sw.arch
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          status: DISABLED
          description: 'The architecture of the operating system.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: os
        - uuid: 055609baebaa4d2e865b61f3181ac158
          name: 'Operating system'
          key: system.sw.os
          delay: 1h
          history: 7d
          value_type: CHAR
          trends: '0'
          status: DISABLED
          inventory_link: OS
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: os
          triggers:
            - uuid: 3bb064cb753f4ee8a5fe374139cee12b
              expression: 'change(/Windows PC by WMI/system.sw.os) and length(last(/Windows PC by WMI/system.sw.os))>0'
              name: 'Operating system description has changed'
              priority: INFO
              description: 'The description of the operating system has changed. Possible reasons are that the system has been updated or replaced. Acknowledge to close the problem manually.'
              manual_close: 'YES'
              dependencies:
                - name: 'System name has changed'
                  expression: 'change(/Windows PC by WMI/system.hostname) and length(last(/Windows PC by WMI/system.hostname))>0'
              tags:
                - tag: scope
                  value: notice
        - uuid: 8ea2a1217c06481080953ed294cfece5
          name: 'Free swap space'
          type: CALCULATED
          key: system.swap.free
          history: 7d
          status: DISABLED
          units: B
          params: 'last(//system.swap.size[,total]) - last(//system.swap.size[,total]) / 100 * last(//perf_counter_en["\Paging file(_Total)\% Usage"])'
          description: 'The free space of the swap volume/file expressed in bytes.'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: 1034a98393574eda98c4693d07e3ba53
          name: 'Free swap space in %'
          type: DEPENDENT
          key: system.swap.pfree
          delay: '0'
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          description: 'The free space of the swap volume/file expressed in %.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - 'return (100 - value)'
          master_item:
            key: 'perf_counter_en["\Paging file(_Total)\% Usage"]'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: 0de4cfe12ad546b4bdcfd42095738271
          name: 'Total swap space'
          key: 'system.swap.size[,total]'
          history: 7d
          status: DISABLED
          units: B
          description: 'The total space of the swap volume/file expressed in bytes.'
          tags:
            - tag: component
              value: memory
            - tag: component
              value: storage
        - uuid: 6e791036c79849e191b81cc5322f8daa
          name: 'System description'
          key: system.uname
          delay: 15m
          history: 7d
          value_type: CHAR
          trends: '0'
          description: 'System description of the host.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: system
        - uuid: 3c393b7875454aa4bb79681844c56613
          name: Uptime
          key: system.uptime
          history: 7d
          trends: '0'
          units: uptime
          description: 'The system uptime expressed in the following format: "N days, hh:mm:ss".'
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: b12928dcfe31492fa9479c1b94f37ef2
              expression: 'last(/Windows PC by WMI/system.uptime)<10m'
              name: 'Host has been restarted'
              event_name: 'Host has been restarted (uptime < 10m)'
              priority: WARNING
              description: 'The device uptime is less than 10 minutes.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: e55f9e0ef78642bb950a7d7284316014
          name: 'Get filesystems'
          key: vfs.fs.get
          history: '0'
          value_type: TEXT
          trends: '0'
          description: 'The `vfs.fs.get` key acquires raw information set about the filesystems. Later to be extracted by preprocessing in dependent items.'
          tags:
            - tag: component
              value: raw
        - uuid: 1b5f173a4fcc44fd9785111b8e90510f
          name: 'Total memory'
          key: 'vm.memory.size[total]'
          history: 7d
          units: B
          description: 'Total memory expressed in bytes.'
          tags:
            - tag: component
              value: memory
        - uuid: 933fa039ecd642b7a29306d415a015a6
          name: 'Used memory'
          key: 'vm.memory.size[used]'
          history: 7d
          status: DISABLED
          units: B
          description: 'Used memory in bytes.'
          tags:
            - tag: component
              value: memory
        - uuid: 8e0cc71845fd461390e108a2d9bc795f
          name: 'Memory utilization'
          type: CALCULATED
          key: vm.memory.util
          history: 7d
          value_type: FLOAT
          status: DISABLED
          units: '%'
          params: 'last(//vm.memory.size[used]) / last(//vm.memory.size[total]) * 100'
          description: 'Memory utilization in %.'
          tags:
            - tag: component
              value: memory
          triggers:
            - uuid: 748e870dcaaa490b972cab305a4a343d
              expression: 'min(/Windows PC by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
              name: 'High memory utilization'
              event_name: 'High memory utilization (>{$MEMORY.UTIL.MAX}% for 5m)'
              priority: AVERAGE
              description: 'The system is running out of free memory.'
              tags:
                - tag: scope
                  value: capacity
                - tag: scope
                  value: performance
        - uuid: fe50cc956edd40ba9b55d344b37b75b3
          name: 'detect sensors'
          key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          history: 1h
          value_type: TEXT
          trends: '0'
          tags:
            - tag: component
              value: raw
          triggers:
            - uuid: 59c5e9b303a640a48db1d2547f62158a
              expression: 'nodata(/Windows PC by WMI/wmi.getall[root/LibreHardwareMonitor,select * from Sensor],5m)=1'
              name: 'LibreHardwareMonitor: Failed to fetch info data'
              event_name: 'LibreHardwareMonitor: Failed to fetch info data (or no data for 30m)'
              status: DISABLED
              priority: WARNING
              description: 'Zabbix has not received data for items for the last 5 minutes'
              dependencies:
                - name: 'Программа мониторинга не запущена'
                  expression: 'last(/Windows PC by WMI/proc.num[LibreHardwareMonitor.exe])=0'
              tags:
                - tag: scope
                  value: availability
            - uuid: ff995ca954154142885920675d22ea43
              expression: 'last(/Windows PC by WMI/wmi.getall[root/LibreHardwareMonitor,select * from Sensor],#1)="[]"'
              name: 'Ошибка получения данных'
              priority: AVERAGE
              dependencies:
                - name: 'Программа мониторинга не запущена'
                  expression: 'last(/Windows PC by WMI/proc.num[LibreHardwareMonitor.exe])=0'
        - uuid: 1575846252f84ec0b4390736368208ee
          name: raw_bios
          key: 'wmi.getall[root\cimv2,"select * from Win32_BIOS"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: bec1f7668478478e92f7c7653c272f70
          name: raw_gpu
          key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 90ff618c572749ec8b1c05c2f41268b3
          name: raw_cpu
          key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 9a367386dbfa44a9907457f4d8eed294
          name: raw_ram
          key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 612a392d24704e52be80d7575b3d17c3
          name: raw_os
          key: 'wmi.getall[root\cimv2,"select Caption,InstallDate,LastBootUpTime,RegisteredUser,SerialNumber,Status,Version from Win32_OperatingSystem"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: d67ff00fa7324ac58cb7f9d6ee6308a4
          name: raw_disks
          key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: 3f7195517eb44b3fa8390d24606878a8
          name: raw_mb
          key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
          delay: 1h
          history: '0'
          value_type: TEXT
          trends: '0'
        - uuid: d3e4e0b6c13b481db23859467f602824
          name: 'Windows: Network interfaces WMI get'
          key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
          history: '0'
          value_type: TEXT
          trends: '0'
          status: DISABLED
          description: 'Raw data of `win32_networkadapter.`'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          tags:
            - tag: component
              value: raw
        - uuid: e8017774dee34632bd45f1de3c9ca941
          name: 'Number of cores'
          key: 'wmi.get[root/cimv2,"Select NumberOfLogicalProcessors from Win32_ComputerSystem"]'
          history: 7d
          status: DISABLED
          description: 'The number of logical processors available on the computer.'
          tags:
            - tag: component
              value: cpu
        - uuid: 97705e0b57b7476ab75417f42d72e08a
          name: 'Доступность Zabbix агента'
          type: INTERNAL
          key: 'zabbix[host,agent,available]'
          history: 1w
          trends: 30d
          triggers:
            - uuid: b617a7406ea64d46bf687737ec6d1dc7
              expression: 'max(/Windows PC by WMI/zabbix[host,agent,available],#3)=0'
              name: 'Zabbix агент недоступен'
              priority: HIGH
              dependencies:
                - name: 'Компьютер выключен'
                  expression: 'max(/Windows PC by WMI/icmpping,#3)=0'
      discovery_rules:
        - uuid: f26c2ee5613449c09196d1e03b0dcfea
          name: 'Обнаружение CPU'
          type: DEPENDENT
          key: cpu_discovery
          delay: '0'
          item_prototypes:
            - uuid: b883bc8d79a54a409f56c22b390dc312
              name: 'Процессор {#CPU_NAME}: архитектура'
              type: DEPENDENT
              key: 'cpu_architecture["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Architecture.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: eadde9215a2e49e18ad510d2240309e5
              name: 'Процессор {#CPU_NAME}: доступность и статус'
              type: DEPENDENT
              key: 'cpu_availability["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              description: |
                Other (1)
                Unknown (2)
                Running/Full Power (3)
                Running or Full Power
                Warning (4)
                In Test (5)
                Not Applicable (6)
                Power Off (7)
                Off Line (8)
                Off Duty (9)
                Degraded (10)
                Not Installed (11)
                Install Error (12)
                Power Save - Unknown (13)
                The device is known to be in a power save state, but its exact status is unknown.
                Power Save - Low Power Mode (14)
                The device is in a power save state, but is still functioning, and may exhibit decreased performance.
                Power Save - Standby (15)
                The device is not functioning, but can be brought to full power quickly.
                Power Cycle (16)
                Power Save - Warning (17)
                The device is in a warning state, though also in a power save state.
                Paused (18)
                The device is paused.
                Not Ready (19)
                The device is not ready.
                Not Configured (20)
                The device is not configured.
                Quiesced (21)
                The device is quiet.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Availability.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 17c43b277905453da6b9a9e701ffdc49
              name: 'Процессор {#CPU_NAME}: базовая частота'
              type: DEPENDENT
              key: 'cpu_current_clock_speed["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].CurrentClockSpeed.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: adf99b58e9754ac286e859048d4bcf22
              name: 'Процессор {#CPU_NAME}: базовое напряжение'
              type: DEPENDENT
              key: 'cpu_current_voltage["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: V
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].CurrentVoltage.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 3daeb743b7ac4ee7a3212f8c53e174b1
              name: 'Процессор {#CPU_NAME}: описание'
              type: DEPENDENT
              key: 'cpu_description["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Description.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 6feb2797838348a58c9282ed08edb14e
              name: 'Процессор {#CPU_NAME}: частота внешнего таймера'
              type: DEPENDENT
              key: 'cpu_ext_clock["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].ExtClock.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 81dc6cc8064549a6a349c9520690e23c
              name: 'Процессор {#CPU_NAME}: объём кэша L2'
              type: DEPENDENT
              key: 'cpu_L2_cache_size["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].L2CacheSize.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1024'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 4b8c49e9d8aa463a8eb4bb3b736a5c72
              name: 'Процессор {#CPU_NAME}: объём кэша L3'
              type: DEPENDENT
              key: 'cpu_L3_cache_size["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].L3CacheSize.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1024'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 2dbd63f1a15b41e7bce4d9cc2ba11c69
              name: 'Процессор {#CPU_NAME}: производитель'
              type: DEPENDENT
              key: 'cpu_manufacturer["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].Manufacturer,.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: d8c9236297084f10b1d2ee195d519eee
              name: 'Процессор {#CPU_NAME}: количество ядер'
              type: DEPENDENT
              key: 'cpu_number_of_cores["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].NumberOfCores.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: ea57cfdf30ff41cfaa572881312036fd
              name: 'Процессор {#CPU_NAME}: количество потоков'
              type: DEPENDENT
              key: 'cpu_number_of_threads["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].ThreadCount.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: d46bd05a95674df791028efe84a90a2e
              name: 'Процессор {#CPU_NAME}: номер партии'
              type: DEPENDENT
              key: 'cpu_part_number["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].PartNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 1140121209be4f48b0078ee5ae76afd1
              name: 'Процессор {#CPU_NAME}: серийный номер'
              type: DEPENDENT
              key: 'cpu_serial_number["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].SerialNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: dad341125f204d7c97a5727d89f70483
              name: 'Процессор {#CPU_NAME}: сокет'
              type: DEPENDENT
              key: 'cpu_socket["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].SocketDesignation.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 6877f14411da4c7c8199e91bf0e7e2cf
              name: 'Процессор {#CPU_NAME}: статус'
              type: DEPENDENT
              key: 'cpu_status["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              description: |
                Unknown (0)
                CPU Enabled (1)
                CPU Disabled by User via BIOS Setup (2)
                CPU Disabled By BIOS (POST Error) (3)
                CPU is Idle (4)
                Reserved (5)
                Reserved (6)
                Other (7)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].CpuStatus.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
            - uuid: 42b4d68c3ec647eab5887a8a4cf31069
              name: 'Процессор {#CPU_NAME}: опция виртуализации'
              type: DEPENDENT
              key: 'cpu_virtualization_enabled["{#CPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#CPU_ID}")].VirtualizationFirmwareEnabled.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Architecture,Availability,CpuStatus,CurrentClockSpeed,CurrentVoltage,Description,DeviceID,ExtClock,L2CacheSize,L3CacheSize,Manufacturer,Name,NumberOfCores,PartNumber,ProcessorId,Revision,SerialNumber,SocketDesignation,Status,ThreadCount,VirtualizationFirmwareEnabled from win32_Processor"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(cpu){
                  	return {
                                  "{#CPU_NAME}": cpu.Name.trim(),
                                  "{#CPU_ID}": cpu.DeviceID
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: 3e13f43671784148bcee7051b86c5f0d
          name: 'Датчики CPU'
          type: DEPENDENT
          key: cpu_sensors_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: CPU
                formulaid: A
          lifetime: 30d
          item_prototypes:
            - uuid: 10e623bd5ef34beeac984065e3fa449a
              name: 'load / {#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: '1cpu_load[{#SENSOR_ID}]'
              delay: '0'
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SensorType == "Load")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
            - uuid: 00a51228c0e044a4b341e256a641bede
              name: 'temp / {#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: '1cpu_temperature[{#SENSOR_ID}]'
              delay: '0'
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.{#SENSOR_TYPE} == "Temperature")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#SENSOR_NAME}": sensor.Name,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 7afb75bb59044bbc974f2a5391c6558a
          name: 'Датчики температуры CPU'
          type: DEPENDENT
          key: cpu_temperatures_discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: CPU
                formulaid: A
              - macro: '{#SENSOR_NAME}'
                value: CCD
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#SENSOR_NAME}'
                value: 'Core #'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              - macro: '{#SENSOR_NAME}'
                value: 'Core Average'
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#SENSOR_NAME}'
                value: 'Core Max'
                operator: NOT_MATCHES_REGEX
                formulaid: E
              - macro: '{#SENSOR_NAME}'
                value: 'Distance to TjMax'
                operator: NOT_MATCHES_REGEX
                formulaid: F
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: G
          lifetime: 30d
          item_prototypes:
            - uuid: a2e3df8ff71a416f841243b9946f7edd
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'cpu_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1w
              value_type: FLOAT
              trends: 30d
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: 5a4f2136fd924157bc9237afba5b2e58
                  expression: 'min(/Windows PC by WMI/cpu_temperature[{#SENSOR_ID}],5m)>={$CPU_TEMP_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/cpu_temperature[{#SENSOR_ID}],5m)<={$CPU_TEMP_CRIT}-3'
                  name: 'Температура {#DEVICE} > {$CPU_TEMP_CRIT} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: e123e6b257be42aa8a7e14b032f6198b
                  expression: 'min(/Windows PC by WMI/cpu_temperature[{#SENSOR_ID}],5m)>={$CPU_TEMP_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/cpu_temperature[{#SENSOR_ID}],5m)<={$CPU_TEMP_WARN}-3'
                  name: 'Температура {#DEVICE} > {$CPU_TEMP_WARN} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Температура {#DEVICE} > {$CPU_TEMP_CRIT} °C'
                      expression: 'min(/Windows PC by WMI/cpu_temperature[{#SENSOR_ID}],5m)>={$CPU_TEMP_CRIT}'
                      recovery_expression: 'min(/Windows PC by WMI/cpu_temperature[{#SENSOR_ID}],5m)<={$CPU_TEMP_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  function replaceName(inputString) {
                      if (inputString.match(/CPU Core #(\d+) Distance to TjMax/)) {
                          return "Distance to TjMax";
                      }
                      if (inputString.includes("CPU Core")) {
                           return inputString.split("CPU")[1] + " Temperature";
                      }
                      else if (inputString.includes("CPU")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("Core")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("(Tdie)")) {
                           return inputString + " Temperature";
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": replaceName(sensor.Name),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 935638e0e143475bbbedad8c728c3cbc
          name: 'Data sensors discovery'
          type: DEPENDENT
          key: data.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSORTYPE}'
                value: Data
                formulaid: A
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: efde52f99dc2403db3158cb1db79c3c4
              name: '{#DEVICE} {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'data.sensor["{#SENSORPATH}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              tags:
                - tag: component
                  value: data
                - tag: sensor
                  value: '{#SENSORPARENT}'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function containsDisks(str) {
                      const disks = ['hdd', 'ssd', 'nvme'];
                      return disks.some(function(disk) {
                          return str.includes(disk);
                      });
                  }
                  
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                          else{
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[1]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU " + cpuBrand + " №" + incrementedNumber;
                      }
                      else if (containsDisks(target)) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск №" + incrementedNumber + " " + uppercasedTarget;
                      }  
                      
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(data){
                      return {
                          "{#SENSOR_ID}": data.Identifier,
                          "{#DEVICE}": replaceString(data.Identifier),
                          "{#SENSOR_NAME}": data.Name,
                          "{#SENSOR_TYPE}": data.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: a623cf3f16b84a52a69de5f97c0ef68b
          name: 'Датчики температуры дисков'
          type: DEPENDENT
          key: disks_temperatures_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: HDD
                formulaid: A
              - macro: '{#DEVICE}'
                value: NVME
                formulaid: B
              - macro: '{#DEVICE}'
                value: SSD
                formulaid: C
              - macro: '{#SENSOR_NAME}'
                value: Temperature
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: E
          lifetime: 30d
          item_prototypes:
            - uuid: a7d58470734d44f9872563e2225f783a
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'disk_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: 8962174c181b4d8c904568ece13e9458
                  expression: 'min(/Windows PC by WMI/disk_temperature[{#SENSOR_ID}],5m)>={$DISK_TEMP_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/disk_temperature[{#SENSOR_ID}],5m)<={$DISK_TEMP_CRIT}-3'
                  name: 'Температура {#DEVICE} > {$DISK_TEMP_CRIT} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: 496ce86960284b199714ecd912946bfb
                  expression: 'min(/Windows PC by WMI/disk_temperature[{#SENSOR_ID}],5m)>={$DISK_TEMP_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/disk_temperature[{#SENSOR_ID}],5m)<={$DISK_TEMP_WARN}-3'
                  name: 'Температура {#DEVICE} > {$DISK_TEMP_WARN} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Температура {#DEVICE} > {$DISK_TEMP_CRIT} °C'
                      expression: 'min(/Windows PC by WMI/disk_temperature[{#SENSOR_ID}],5m)>={$DISK_TEMP_CRIT}'
                      recovery_expression: 'min(/Windows PC by WMI/disk_temperature[{#SENSOR_ID}],5m)<={$DISK_TEMP_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("hdd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget;
                      }  
                      else if (target.includes("ssd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - SATA " + uppercasedTarget;
                      }
                      else if (target.includes("nvme")) {
                          const uppercasedExceptLast = target.slice(0, -1).toUpperCase();
                          const lastChar = target.slice(-1);
                          const uppercasedTarget = uppercasedExceptLast + lastChar;
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget + " SSD";
                      }
                      else {
                          return inputString;
                      }    
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": sensor.Name,
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 630d26bf85154e0599ec7eee6a6195c8
          name: 'Обнаружение дисков'
          type: DEPENDENT
          key: disk_discovery
          delay: '0'
          item_prototypes:
            - uuid: aed04058cafd492588764e81b2feb2b9
              name: 'Диск {#DISK_MODEL}: код ошибки'
              type: DEPENDENT
              key: 'disk_config_manager_error_code["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              description: |
                This device is working properly. (0)
                This device is not configured correctly. (1)
                Windows cannot load the driver for this device. (2)
                The driver for this device might be corrupted, or your system may be running low on memory or other resources. (3)
                This device is not working properly. One of its drivers or your registry might be corrupted. (4)
                The driver for this device needs a resource that Windows cannot manage. (5)
                The boot configuration for this device conflicts with other devices. (6)
                Cannot filter. (7)
                The driver loader for the device is missing. (8)
                This device is not working properly because the controlling firmware is reporting the resources for the device incorrectly. (9)
                This device cannot start. (10)
                This device failed. (11)
                This device cannot find enough free resources that it can use. (12)
                Windows cannot verify this device's resources. (13)
                This device cannot work properly until you restart your computer. (14)
                This device is not working properly because there is probably a re-enumeration problem. (15)
                Windows cannot identify all the resources this device uses. (16)
                This device is asking for an unknown resource type. (17)
                Reinstall the drivers for this device. (18)
                Failure using the VxD loader. (19)
                Your registry might be corrupted. (20)
                System failure: Try changing the driver for this device. If that does not work, see your hardware documentation. Windows is removing this device. (21)
                This device is disabled. (22)
                System failure: Try changing the driver for this device. If that doesn't work, see your hardware documentation. (23)
                This device is not present, is not working properly, or does not have all its drivers installed. (24)
                Windows is still setting up this device. (25)
                Windows is still setting up this device. (26)
                This device does not have valid log configuration. (27)
                The drivers for this device are not installed. (28)
                This device is disabled because the firmware of the device did not give it the required resources. (29)
                This device is using an Interrupt Request (IRQ) resource that another device is using. (30)
                This device is not working properly because Windows cannot load the drivers required for this device. (31)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].ConfigManagerErrorCode.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
              trigger_prototypes:
                - uuid: de0dcbbb818344e0afa2d4f6c27c2935
                  expression: 'last(/Windows PC by WMI/disk_config_manager_error_code["{#DISK_ID}"])<>0'
                  name: 'Ошибка диска {#DISK_MODEL}'
                  priority: AVERAGE
            - uuid: d898991def68415a82a068724ddc2465
              name: 'Диск {#DISK_MODEL}: версия ПО'
              type: DEPENDENT
              key: 'disk_firmware["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].FirmwareRevision.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 5c3df7b1e3b3446092699e2628a94f98
              name: 'Диск {#DISK_MODEL}: тип интерфейса'
              type: DEPENDENT
              key: 'disk_interface_type["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].InterfaceType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 805442666ac94ad3958284b9219344e2
              name: 'Диск {#DISK_MODEL}: производитель'
              type: DEPENDENT
              key: 'disk_manufacturer["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].Manufacturer.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 414e2ced0c0c49379946d7c439bd1f4c
              name: 'Диск {#DISK_MODEL}: слот SCSI'
              type: DEPENDENT
              key: 'disk_SCSIPort["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].SCSIPort.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: b7a997cdf9dc4af588eaba24a441759f
              name: 'Диск {#DISK_MODEL}: серийный номер'
              type: DEPENDENT
              key: 'disk_serial_number["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].SerialNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 8ad28f265cf94ae1b0dcaaf1396f70f5
              name: 'Диск {#DISK_MODEL}: объём'
              type: DEPENDENT
              key: 'disk_size["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].Size.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
            - uuid: 00d397213a3b413a8d6b13134f6ab807
              name: 'Диск {#DISK_MODEL}: статус'
              type: DEPENDENT
              key: 'disk_status["{#DISK_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#DISK_ID}")].Status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select ConfigManagerErrorCode,DeviceID,FirmwareRevision,InterfaceType,Manufacturer,Model,SCSIPort,SerialNumber,Size,Status from Win32_DiskDrive"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(disk){
                  	return {
                                  "{#DISK_ID}": disk.DeviceID,
                                  "{#DISK_MODEL}": disk.Model.trim()
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: 748a5e961c2c4e5796963bbf501c9daa
          name: Вентиляторы
          type: DEPENDENT
          key: fans_discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSOR_TYPE}'
                value: Fan
                formulaid: A
          lifetime: 30d
          item_prototypes:
            - uuid: 65ee9d115f844246b4e62532fbfcb645
              name: '{#SENSOR_NAME}: скорость вращения'
              type: DEPENDENT
              key: 'fan_rpm["{#SENSOR_ID}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: RPM
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      var gpuPattern = /.*\/gpu-([^\/]+)\/(\d+)\/fan\/(\d+)/;
                      var gpuMatch = inputString.match(gpuPattern);
                      var Pattern = /.*\/0\/fan\/(\d+)/;
                      var Match = inputString.match(Pattern);
                  
                      if (gpuMatch) {
                          var gpuBrand = gpuMatch[1];
                          var gpuNumber = parseInt(gpuMatch[2], 10);
                          var Number = parseInt(gpuMatch[3], 10);
                          var newGpuNumber = gpuNumber + 1;
                  
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                  
                          return "GPU # " + newGpuNumber + " - " + gpuBrand + " Fan #" + Number;
                      }
                  
                      else if (Match) {
                          var Number = parseInt(Match[1], 10);
                  
                          if (Number === 0) {
                              return "CPU Fan";
                          } else {
                              return "Fan  #" + Number;
                          }
                      }
                  
                      return inputString;
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#SENSOR_NAME}": replaceString(sensor.Identifier),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 07b20786bf0d45509ae059824b7ba4c7
          name: 'Обнаружение GPU'
          type: DEPENDENT
          key: gpu_discovery
          delay: '0'
          filter:
            evaltype: OR
            conditions:
              - macro: '{#GPU_FILTER}'
                value: amd
                formulaid: A
              - macro: '{#GPU_FILTER}'
                value: intel
                formulaid: B
              - macro: '{#GPU_FILTER}'
                value: nvidia
                formulaid: C
          item_prototypes:
            - uuid: bf0289ca6747439e923b5c9bee210cd0
              name: 'GPU {#GPU_NAME}: архитектура'
              type: DEPENDENT
              key: 'gpu_architecture["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].VideoArchitecture.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 3da4b266c1d8462fbd87aba992a65135
              name: 'GPU {#GPU_NAME}: доступность'
              type: DEPENDENT
              key: 'gpu_availability["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              description: |
                Other (1)
                Unknown (2)
                Running/Full Power (3)
                Warning (4)
                In Test (5)
                Not Applicable (6)
                Power Off (7)
                Off Line (8)
                Offline
                Off Duty (9)
                Degraded (10)
                Not Installed (11)
                Install Error (12)
                Power Save - Unknown (13)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Availability.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 0a46bd7b56ab4ae3b03aa9a13fca3b65
              name: 'GPU {#GPU_NAME}: подпись'
              type: DEPENDENT
              key: 'gpu_caption["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Caption.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 4808733d30ad484ba85595270849cda4
              name: 'GPU {#GPU_NAME}: код ошибки'
              type: DEPENDENT
              key: 'gpu_config_manager_error_code["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              description: |
                This device is working properly. (0)
                This device is not configured correctly. (1)
                Windows cannot load the driver for this device. (2)
                The driver for this device might be corrupted, or your system may be running low on memory or other resources. (3)
                This device is not working properly. One of its drivers or your registry might be corrupted. (4)
                The driver for this device needs a resource that Windows cannot manage. (5)
                The boot configuration for this device conflicts with other devices. (6)
                Cannot filter. (7)
                The driver loader for the device is missing. (8)
                This device is not working properly because the controlling firmware is reporting the resources for the device incorrectly. (9)
                This device cannot start. (10)
                This device failed. (11)
                This device cannot find enough free resources that it can use. (12)
                Windows cannot verify this device's resources. (13)
                This device cannot work properly until you restart your computer. (14)
                This device is not working properly because there is probably a re-enumeration problem. (15)
                Windows cannot identify all the resources this device uses. (16)
                This device is asking for an unknown resource type. (17)
                Reinstall the drivers for this device. (18)
                Failure using the VxD loader. (19)
                Your registry might be corrupted. (20)
                System failure: Try changing the driver for this device. If that does not work, see your hardware documentation. Windows is removing this device. (21)
                This device is disabled. (22)
                System failure: Try changing the driver for this device. If that doesn't work, see your hardware documentation. (23)
                This device is not present, is not working properly, or does not have all its drivers installed. (24)
                Windows is still setting up this device. (25)
                Windows is still setting up this device. (26)
                This device does not have valid log configuration. (27)
                The drivers for this device are not installed. (28)
                This device is disabled because the firmware of the device did not give it the required resources. (29)
                This device is using an Interrupt Request (IRQ) resource that another device is using. (30)
                This device is not working properly because Windows cannot load the drivers required for this device. (31)
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].ConfigManagerErrorCode.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
              trigger_prototypes:
                - uuid: 3ac94bedf047498fab6238415adae1ba
                  expression: 'last(/Windows PC by WMI/gpu_config_manager_error_code["{#GPU_ID}"])<>0'
                  name: 'Ошибка GPU {#GPU_NAME}'
                  priority: AVERAGE
            - uuid: 9b13427e0d474de7a188a06fd727a70d
              name: 'GPU {#GPU_NAME}: описание'
              type: DEPENDENT
              key: 'gpu_description["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Description.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 668110d2bbe94fdfa2b579c930340f3f
              name: 'GPU {#GPU_NAME}: дата релиза драйвера'
              type: DEPENDENT
              key: 'gpu_driver_date["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].DriverDate.first()'
                - type: REGEX
                  parameters:
                    - '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})'
                    - '\3.\2.\1 \4:\5:\6'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 0c95de546f684fddb83003bf04129552
              name: 'GPU {#GPU_NAME}: версия драйвера'
              type: DEPENDENT
              key: 'gpu_driver_version["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].DriverVersion.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: eff0b5ee2c284ba2b5c85c1f26e2554c
              name: 'GPU {#GPU_NAME}: горизонтальное разрешение экрана'
              type: DEPENDENT
              key: 'gpu_horizontal_resolution["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].CurrentHorizontalResolution.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: d40a7ae3366b44d18f1c7b34f36aea21
              name: 'GPU {#GPU_NAME}: тип памяти'
              type: DEPENDENT
              key: 'gpu_memory_type["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].VideoMemoryType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 541d2faa7ed340308153785a14579035
              name: 'GPU {#GPU_NAME}: процессор'
              type: DEPENDENT
              key: 'gpu_processor["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].VideoProcessor.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 0af63aaf2824451ea0ea78b319691956
              name: 'GPU {#GPU_NAME}: RAM'
              type: DEPENDENT
              key: 'gpu_ram["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].AdapterRAM.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 2d57a120869a45f5bdab8d0a458555ff
              name: 'GPU {#GPU_NAME}: частота обновления экрана'
              type: DEPENDENT
              key: 'gpu_refresh_rate["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].CurrentRefreshRate.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: c978869f5bc24a9dbafacbed936c1022
              name: 'GPU {#GPU_NAME}: статус'
              type: DEPENDENT
              key: 'gpu_status["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].Status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
            - uuid: 9f553f0688254fc7bfff1f41edd29e9d
              name: 'GPU {#GPU_NAME}: вертикальное разрешение экрана'
              type: DEPENDENT
              key: 'gpu_vertical_resolution["{#GPU_ID}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.DeviceID == "{#GPU_ID}")].CurrentVerticalResolution.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select AdapterRAM,Availability,Caption,ConfigManagerErrorCode,CurrentHorizontalResolution,CurrentRefreshRate,CurrentVerticalResolution,Description,DeviceID,DriverDate,DriverVersion,Name,Status,VideoArchitecture,VideoMemoryType,VideoProcessor from Win32_VideoController"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function findBrandSubstring(inputString) {
                      // Переводим входную строку в нижний регистр
                      var lowerCaseString = inputString.toLowerCase();
                  
                      // Список брендов для поиска
                      var brands = ["amd", "nvidia", "intel"];
                  
                      // Ищем каждый бренд в строке
                      for (var i = 0; i < brands.length; i++) {
                          var brand = brands[i];
                          if (lowerCaseString.includes(brand)) {
                              return brand;
                          }
                      }
                  
                      // Если ничего не найдено, возвращаем "other"
                      return "other";
                  }
                  
                  output = JSON.parse(value).map(function(gpu){
                  	return {
                                  "{#GPU_FILTER}": findBrandSubstring(gpu.Name),
                                  "{#GPU_NAME}": gpu.Name.trim(),
                                  "{#GPU_ID}": gpu.DeviceID
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: fb94d94374aa4915961b78bad1dd6b0f
          name: 'Датчики температуры GPU'
          type: DEPENDENT
          key: gpu_temperatures_discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: GPU
                formulaid: A
              - macro: '{#SENSOR_NAME}'
                value: 'Hot Spot Temperature'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: C
          lifetime: 30d
          item_prototypes:
            - uuid: 10bcb1c8a5d7458abc463493bd5a1e98
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'gpu_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1w
              value_type: FLOAT
              trends: 30d
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: 40c8e3234cd34a978fcb07884db1daa6
                  expression: 'min(/Windows PC by WMI/gpu_temperature[{#SENSOR_ID}],5m)>={$GPU_TEMP_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/gpu_temperature[{#SENSOR_ID}],5m)<={$GPU_TEMP_CRIT}-3'
                  name: 'Температура {#DEVICE} > {$GPU_TEMP_CRIT} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: 3331d42d0e1147f6b4e985b57db20c97
                  expression: 'min(/Windows PC by WMI/gpu_temperature[{#SENSOR_ID}],5m)>={$GPU_TEMP_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/gpu_temperature[{#SENSOR_ID}],5m)<={$GPU_TEMP_WARN}-3'
                  name: 'Температура {#DEVICE} > {$GPU_TEMP_WARN} °C'
                  opdata: 'Текущая температура:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Температура {#DEVICE} > {$GPU_TEMP_CRIT} °C'
                      expression: 'min(/Windows PC by WMI/gpu_temperature[{#SENSOR_ID}],5m)>={$GPU_TEMP_CRIT}'
                      recovery_expression: 'min(/Windows PC by WMI/gpu_temperature[{#SENSOR_ID}],5m)<={$GPU_TEMP_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                          else{
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  function replaceName(inputString) {
                      if (inputString.includes("GPU")) {
                           return inputString.split('GPU')[1] + " Temperature";
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": replaceName(sensor.Name),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: eef1fd20e66b4bf9b2921885604f1271
          name: Нагрузка
          type: DEPENDENT
          key: load_discovery
          delay: '0'
          filter:
            evaltype: FORMULA
            formula: 'A and ((B and C) or (D and E) or (F and G and H and I))'
            conditions:
              - macro: '{#SENSOR_TYPE}'
                value: Load
                formulaid: A
              - macro: '{#DEVICE}'
                value: CPU
                formulaid: B
              - macro: '{#SENSOR_NAME}'
                value: 'CPU Total'
                formulaid: C
              - macro: '{#DEVICE}'
                value: GPU
                formulaid: D
              - macro: '{#SENSOR_NAME}'
                value: 'GPU Core'
                formulaid: E
              - macro: '{#DEVICE}'
                value: RAM
                formulaid: F
              - macro: '{#SENSOR_NAME}'
                value: 'Memory Available'
                operator: NOT_MATCHES_REGEX
                formulaid: G
              - macro: '{#SENSOR_NAME}'
                value: 'Memory Used'
                operator: NOT_MATCHES_REGEX
                formulaid: H
              - macro: '{#SENSOR_NAME}'
                value: 'Virtual Memory'
                operator: NOT_MATCHES_REGEX
                formulaid: I
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: 96bd1cd81a23419e96e504323a8883e3
              name: '{#DEVICE}: {#SENSOR_NAME} load'
              type: DEPENDENT
              key: 'load[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              trigger_prototypes:
                - uuid: 11b2b6614ee14ed584b481050f4c80a6
                  expression: 'min(/Windows PC by WMI/load[{#SENSOR_ID}],5m)>={$LOAD_CRIT}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/load[{#SENSOR_ID}],5m)<={$LOAD_CRIT}-3'
                  name: 'Загрузка {#DEVICE} > {$LOAD_CRIT} %'
                  opdata: 'Текущая загрузка:{ITEM.LASTVALUE1}'
                  priority: HIGH
                - uuid: a50ef84e04f94719822dadeff478b2fa
                  expression: 'min(/Windows PC by WMI/load[{#SENSOR_ID}],5m)>={$LOAD_WARN}'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'min(/Windows PC by WMI/load[{#SENSOR_ID}],5m)<={$LOAD_WARN}-3'
                  name: 'Загрузка {#DEVICE} > {$LOAD_WARN} %'
                  opdata: 'Текущая загрузка:{ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  dependencies:
                    - name: 'Загрузка {#DEVICE} > {$LOAD_CRIT} %'
                      expression: 'min(/Windows PC by WMI/load[{#SENSOR_ID}],5m)>={$LOAD_CRIT}'
                      recovery_expression: 'min(/Windows PC by WMI/load[{#SENSOR_ID}],5m)<={$LOAD_CRIT}-3'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("ram")) {
                          return "RAM";
                      }
                      else if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                          else{
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else if (target.includes("hdd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget;
                      }  
                      else if (target.includes("ssd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - SATA " + uppercasedTarget;
                      }
                      else if (target.includes("nvme")) {
                          const uppercasedExceptLast = target.slice(0, -1).toUpperCase();
                          const lastChar = target.slice(-1);
                          const uppercasedTarget = uppercasedExceptLast + lastChar;
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget + " SSD";
                      }
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(load){
                      return {
                          "{#SENSOR_ID}": load.Identifier,
                          "{#DEVICE}": replaceString(load.Identifier),
                          "{#SENSOR_NAME}": load.Name,
                          "{#SENSOR_TYPE}": load.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 1c53f5167b524cd384e1b723dabd31b4
          name: 'Обнаружение материнской платы'
          type: DEPENDENT
          key: mb_discovery
          delay: '0'
          item_prototypes:
            - uuid: 309c38bbe6a7467a9e8cea943cb3d948
              name: 'Материнская плата {#MB_PRODUCT}: производитель'
              type: DEPENDENT
              key: 'mb_manufacturer["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].Manufacturer.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
            - uuid: a43ccb6529da46ed9df6246526137b44
              name: 'Материнская плата {#MB_PRODUCT}: серийный номер'
              type: DEPENDENT
              key: 'mb_serial_number["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].SerialNumber.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
            - uuid: 08c6b0cba39c4378ba34ba4e10f48c94
              name: 'Материнская плата {#MB_PRODUCT}: статус'
              type: DEPENDENT
              key: 'mb_status["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].Status.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
            - uuid: b3c2323c3e4442008a95b8b32e07fafc
              name: 'Материнская плата {#MB_PRODUCT}: версия'
              type: DEPENDENT
              key: 'mb_version["{#MB_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#MB_SERIAL_NUMBER}")].Version.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Manufacturer,Product,SerialNumber,Status,Version from Win32_BaseBoard"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(mb){
                  	return {
                                  "{#MB_PRODUCT}": mb.Product.trim(),
                                  "{#MB_SERIAL_NUMBER}": mb.SerialNumber
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: fd20e9dd87c14f6f94c07b62872c1c8e
          name: 'Датчики температуры материнской платы'
          type: DEPENDENT
          key: mb_temperatures_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: LPC
                formulaid: A
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: B
          lifetime: 30d
          item_prototypes:
            - uuid: ee83ed860d7e41ddad68c4a2d6baab9b
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'mb_temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": sensor.Name,
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 576596e88d614971a7bf0b0bde3a06d5
          name: 'Network interfaces discovery'
          type: DEPENDENT
          key: net.if.discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#IFALIAS}'
                value: '{$NET.IF.IFALIAS.MATCHES}'
                formulaid: A
              - macro: '{#IFALIAS}'
                value: '{$NET.IF.IFALIAS.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#IFDESCR}'
                value: '{$NET.IF.IFDESCR.MATCHES}'
                formulaid: C
              - macro: '{#IFDESCR}'
                value: '{$NET.IF.IFDESCR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#IFNAME}'
                value: '{$NET.IF.IFNAME.MATCHES}'
                formulaid: E
              - macro: '{#IFNAME}'
                value: '{$NET.IF.IFNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: F
          description: 'Discovery of installed network interfaces.'
          item_prototypes:
            - uuid: 4c80f7a1151b4fae9c663e8bae408325
              name: 'Interface {#IFNAME}({#IFALIAS}): Inbound packets discarded'
              key: 'net.if.in["{#IFGUID}",dropped]'
              delay: 3m
              history: 7d
              description: 'The number of incoming packets dropped on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 0c96934d1f8f4b03a9d09047fc5daf68
              name: 'Interface {#IFNAME}({#IFALIAS}): Inbound packets with errors'
              key: 'net.if.in["{#IFGUID}",errors]'
              delay: 3m
              history: 7d
              description: 'The number of incoming packets with errors on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: fff29021bd054528a66b1d375605ef25
              name: 'Interface {#IFNAME}({#IFALIAS}): Bits received'
              key: 'net.if.in["{#IFGUID}"]'
              delay: 3m
              history: 7d
              units: bps
              description: 'Incoming traffic on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                - type: MULTIPLIER
                  parameters:
                    - '8'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 4821641d5d6c416596ecdadcebf9eac6
              name: 'Interface {#IFNAME}({#IFALIAS}): Outbound packets discarded'
              key: 'net.if.out["{#IFGUID}",dropped]'
              delay: 3m
              history: 7d
              description: 'The number of outgoing packets dropped on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 0bcea195c1724d91a3342de2997dd5c4
              name: 'Interface {#IFNAME}({#IFALIAS}): Outbound packets with errors'
              key: 'net.if.out["{#IFGUID}",errors]'
              delay: 3m
              history: 7d
              description: 'The number of outgoing packets with errors on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 966afc325cf44c0eaf69499c292c117f
              name: 'Interface {#IFNAME}({#IFALIAS}): Bits sent'
              key: 'net.if.out["{#IFGUID}"]'
              delay: 3m
              history: 7d
              units: bps
              description: 'Outgoing traffic on the network interface.'
              preprocessing:
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                - type: MULTIPLIER
                  parameters:
                    - '8'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: fe2ec0436ddc4ec196b799fbc5eba1ef
              name: 'Interface {#IFNAME}({#IFALIAS}): Speed'
              type: DEPENDENT
              key: 'net.if.speed["{#IFGUID}"]'
              delay: '0'
              history: 7d
              trends: '0'
              units: bps
              description: 'Estimated bandwidth of the network interface if any.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.GUID == "{#IFGUID}")].Speed.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
                - type: JAVASCRIPT
                  parameters:
                    - 'return (value==''9223372036854775807'' ? 0 : value)'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 9c4e3c13ee4f456d90dfced5a56b83ca
              name: 'Interface {#IFNAME}({#IFALIAS}): Operational status'
              type: DEPENDENT
              key: 'net.if.status["{#IFGUID}"]'
              delay: '0'
              history: 7d
              trends: '0'
              description: 'The operational status of the network interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.GUID == "{#IFGUID}")].NetConnectionStatus.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
              trigger_prototypes:
                - uuid: 2c037dd2ea43463980d64ac7db29533b
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows PC by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/Windows PC by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
                  name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: |
                    This trigger expression works as follows:
                    1. It can be triggered if the operations status is down.
                    2. `{$IFCONTROL:"{#IFNAME}"}=1` - a user can redefine the context macro to "0", marking this interface as not important.
                    No new trigger will be fired if this interface is down.
                    3. `last(/TEMPLATE_NAME/METRIC,#1)<>last(/TEMPLATE_NAME/METRIC,#2)` - the trigger fires only if the operational status was up to (1) sometime before (so, does not fire for the 'eternal off' interfaces.)
                    
                    WARNING: if closed manually - it will not fire again on the next poll, because of .diff.
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: 6b9dcf60f2c84104a87fca488e17b06d
              name: 'Interface {#IFNAME}({#IFALIAS}): Interface type'
              type: DEPENDENT
              key: 'net.if.type["{#IFGUID}"]'
              delay: '0'
              history: 7d
              trends: '0'
              description: 'The type of the network interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.GUID == "{#IFGUID}")].AdapterTypeId.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFALIAS}'
                - tag: interface
                  value: '{#IFNAME}'
          trigger_prototypes:
            - uuid: 2826a0b3c0e647f3bc4bec3362561b01
              expression: |
                change(/Windows PC by WMI/net.if.speed["{#IFGUID}"])<0 and
                last(/Windows PC by WMI/net.if.speed["{#IFGUID}"])>0 and
                last(/Windows PC by WMI/net.if.status["{#IFGUID}"])=2
              name: 'Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before'
              opdata: 'Current reported speed: {ITEM.LASTVALUE1}'
              priority: INFO
              description: 'This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Acknowledge to close the problem manually.'
              manual_close: 'YES'
              dependencies:
                - name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows PC by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_expression: 'last(/Windows PC by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: capacity
            - uuid: 342987993e5e4da08a00f8c4eae06953
              expression: |
                (avg(/Windows PC by WMI/net.if.in["{#IFGUID}"],15m)>({$IF.UTIL.MAX:"{#IFNAME}"}/100)*last(/Windows PC by WMI/net.if.speed["{#IFGUID}"]) or
                avg(/Windows PC by WMI/net.if.out["{#IFGUID}"],15m)>({$IF.UTIL.MAX:"{#IFNAME}"}/100)*last(/Windows PC by WMI/net.if.speed["{#IFGUID}"])) and
                last(/Windows PC by WMI/net.if.speed["{#IFGUID}"])>0
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                avg(/Windows PC by WMI/net.if.in["{#IFGUID}"],15m)<(({$IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*last(/Windows PC by WMI/net.if.speed["{#IFGUID}"]) and
                avg(/Windows PC by WMI/net.if.out["{#IFGUID}"],15m)<(({$IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*last(/Windows PC by WMI/net.if.speed["{#IFGUID}"])
              name: 'Interface {#IFNAME}({#IFALIAS}): High bandwidth usage'
              event_name: 'Interface {#IFNAME}({#IFALIAS}): High bandwidth usage (>{$IF.UTIL.MAX:"{#IFNAME}"}%)'
              opdata: 'In: {ITEM.LASTVALUE1}, out: {ITEM.LASTVALUE3}, speed: {ITEM.LASTVALUE2}'
              priority: WARNING
              description: 'The utilization of the network interface is close to its estimated maximum bandwidth.'
              manual_close: 'YES'
              dependencies:
                - name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows PC by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_expression: 'last(/Windows PC by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: performance
            - uuid: 8e7a22f5c234439192be047ab12fbf96
              expression: |
                min(/Windows PC by WMI/net.if.in["{#IFGUID}",errors],5m)>{$IF.ERRORS.WARN:"{#IFNAME}"}
                or min(/Windows PC by WMI/net.if.out["{#IFGUID}",errors],5m)>{$IF.ERRORS.WARN:"{#IFNAME}"}
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                max(/Windows PC by WMI/net.if.in["{#IFGUID}",errors],5m)<{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8
                and max(/Windows PC by WMI/net.if.out["{#IFGUID}",errors],5m)<{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8
              name: 'Interface {#IFNAME}({#IFALIAS}): High error rate'
              event_name: 'Interface {#IFNAME}({#IFALIAS}): High error rate (>{$IF.ERRORS.WARN:"{#IFNAME}"} for 5m)'
              opdata: 'errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}'
              priority: WARNING
              description: 'It recovers when it is below 80% of the `{$IF.ERRORS.WARN:"{#IFNAME}"}` threshold.'
              manual_close: 'YES'
              dependencies:
                - name: 'Interface {#IFNAME}({#IFALIAS}): Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and last(/Windows PC by WMI/net.if.status["{#IFGUID}"])<>2 and (last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#1)<>last(/Windows PC by WMI/net.if.status["{#IFGUID}"],#2))'
                  recovery_expression: 'last(/Windows PC by WMI/net.if.status["{#IFGUID}"])=2 or {$IFCONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: availability
          graph_prototypes:
            - uuid: 49b40dde1a374102a05fdeab1e57d1d5
              name: 'Interface {#IFNAME}({#IFALIAS}): Network traffic'
              graph_items:
                - drawtype: GRADIENT_LINE
                  color: 199C0D
                  item:
                    host: 'Windows PC by WMI'
                    key: 'net.if.in["{#IFGUID}"]'
                - sortorder: '1'
                  drawtype: BOLD_LINE
                  color: F63100
                  item:
                    host: 'Windows PC by WMI'
                    key: 'net.if.out["{#IFGUID}"]'
                - sortorder: '2'
                  color: 00611C
                  yaxisside: RIGHT
                  item:
                    host: 'Windows PC by WMI'
                    key: 'net.if.out["{#IFGUID}",errors]'
                - sortorder: '3'
                  color: F7941D
                  yaxisside: RIGHT
                  item:
                    host: 'Windows PC by WMI'
                    key: 'net.if.in["{#IFGUID}",errors]'
                - sortorder: '4'
                  color: FC6EA3
                  yaxisside: RIGHT
                  item:
                    host: 'Windows PC by WMI'
                    key: 'net.if.out["{#IFGUID}",dropped]'
                - sortorder: '5'
                  color: 6C59DC
                  yaxisside: RIGHT
                  item:
                    host: 'Windows PC by WMI'
                    key: 'net.if.in["{#IFGUID}",dropped]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus>0"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(net){
                  	return {
                  		"{#IFNAME}": net.Name,
                  		"{#IFDESCR}": net.Description,
                  		"{#IFALIAS}": net.NetConnectionID,
                  		"{#IFGUID}": net.GUID
                  	}})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 4d68f5d0ea7c401a8f367d7bf417cc5c
          name: 'Physical disks discovery'
          key: 'perf_instance_en.discovery[PhysicalDisk]'
          delay: 1h
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVNAME}'
                value: '{$VFS.DEV.DEVNAME.MATCHES}'
                formulaid: A
              - macro: '{#DEVNAME}'
                value: '{$VFS.DEV.DEVNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
          description: 'Discovery of installed physical disks.'
          item_prototypes:
            - uuid: b4acbcf45cab41e0875a16c6cf31b5d3
              name: '{#DEVNAME}: Disk utilization by idle time'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\% Idle Time",60]'
              history: 7d
              value_type: FLOAT
              units: '%'
              description: 'This item is the percentage of elapsed time that the selected disk drive was busy servicing read or writes requests based on idle time.'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - 'return (100 - value)'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
              trigger_prototypes:
                - uuid: 47d0b12b5f204246b55737f1158cfe67
                  expression: 'min(/Windows PC by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\% Idle Time",60],15m)>{$VFS.DEV.UTIL.MAX.WARN}'
                  name: '{#DEVNAME}: Disk is overloaded'
                  event_name: '{#DEVNAME}: Disk is overloaded (util > {$VFS.DEV.UTIL.MAX.WARN}% for 15m)'
                  priority: WARNING
                  description: 'The disk appears to be under heavy load.'
                  manual_close: 'YES'
                  dependencies:
                    - name: '{#DEVNAME}: Disk read request responses are too high'
                      expression: 'min(/Windows PC by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60],15m) > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"}'
                    - name: '{#DEVNAME}: Disk write request responses are too high'
                      expression: 'min(/Windows PC by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60],15m) > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: bef2c167363142b2845d25c2795df203
              name: '{#DEVNAME}: Average disk read queue length'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Read Queue Length",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              description: 'Average disk read queue, the number of requests outstanding on the disk at the time the performance data is collected.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: 86b0f41b96f2457baff986cf0647ccc6
              name: '{#DEVNAME}: Disk read request avg waiting time'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60]'
              history: 7d
              value_type: FLOAT
              units: s
              description: 'The average time for read requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
              trigger_prototypes:
                - uuid: 335545aede7048cb97663b9e3a3aec08
                  expression: 'min(/Windows PC by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60],15m) > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"}'
                  name: '{#DEVNAME}: Disk read request responses are too high'
                  event_name: '{#DEVNAME}: Disk read request responses are too high (read > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"}s for 15m)'
                  priority: WARNING
                  description: 'This trigger might indicate the disk {#DEVNAME} saturation.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: a226cb6aa3894f5abc40b6f555b0ca00
              name: '{#DEVNAME}: Disk write request avg waiting time'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60]'
              history: 7d
              value_type: FLOAT
              units: s
              description: 'The average time for write requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
              trigger_prototypes:
                - uuid: d0477df17aa547d09233f867d00e3cb2
                  expression: 'min(/Windows PC by WMI/perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60],15m) > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}'
                  name: '{#DEVNAME}: Disk write request responses are too high'
                  event_name: '{#DEVNAME}: Disk write request responses are too high (write > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}s for 15m)'
                  priority: WARNING
                  description: 'This trigger might indicate the disk {#DEVNAME} saturation.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 9750f1c5b92948cda50918986ac2a195
              name: '{#DEVNAME}: Average disk write queue length'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Write Queue Length",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              description: 'Average disk write queue, the number of requests outstanding on the disk at the time the performance data is collected.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: b3c21521584c469192e54350ccd71285
              name: '{#DEVNAME}: Disk average queue size (avgqu-sz)'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Current Disk Queue Length",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              description: 'The current average disk queue; the number of requests outstanding on the disk while the performance data is being collected.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: 7a211922a7734269b75d9e41c2bc9a26
              name: '{#DEVNAME}: Disk read rate'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Reads/sec",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              units: '!r/s'
              description: 'Rate of read operations on the disk.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
            - uuid: 8bc25040375a4fbabb1a721cfb95fa3e
              name: '{#DEVNAME}: Disk write rate'
              key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Writes/sec",60]'
              history: 7d
              value_type: FLOAT
              status: DISABLED
              discover: NO_DISCOVER
              units: '!w/s'
              description: 'Rate of write operations on the disk.'
              tags:
                - tag: component
                  value: storage
                - tag: disk
                  value: '{#DEVNAME}'
          graph_prototypes:
            - uuid: e82763a0743e4a129a143ea0d87c72d5
              name: '{#DEVNAME}: Disk average queue length'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Read Queue Length",60]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk Write Queue Length",60]'
            - uuid: 8e7a4a2c5b574902a2b11c75008f928a
              name: '{#DEVNAME}: Disk average waiting time'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Read",60]'
                - sortorder: '1'
                  drawtype: GRADIENT_LINE
                  color: F63100
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Avg. Disk sec/Write",60]'
            - uuid: 872b717f94a448e69bc5af8bdedeb725
              name: '{#DEVNAME}: Disk read/write rates'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Reads/sec",60]'
                - sortorder: '1'
                  drawtype: GRADIENT_LINE
                  color: F63100
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Disk Writes/sec",60]'
            - uuid: b42923a2ec7f403ea5cb613f626e85bd
              name: '{#DEVNAME}: Disk utilization and queue'
              graph_items:
                - color: 199C0D
                  yaxisside: RIGHT
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\Current Disk Queue Length",60]'
                - sortorder: '1'
                  drawtype: GRADIENT_LINE
                  color: F63100
                  item:
                    host: 'Windows PC by WMI'
                    key: 'perf_counter_en["\PhysicalDisk({#DEVNAME})\% Idle Time",60]'
          preprocessing:
            - type: STR_REPLACE
              parameters:
                - '{#INSTANCE}'
                - '{#DEVNAME}'
        - uuid: 9c8822b96cbf4459866abe537a7f7847
          name: 'Power sensors discovery'
          type: DEPENDENT
          key: power.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSOR_TYPE}'
                value: Power
                formulaid: A
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: 71f1dca14cbe4b5196783a54f7a414d9
              name: '{#SENSOR_NAME}: потребляемая мощность'
              type: DEPENDENT
              key: 'power.sensor["{#SENSOR_ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: W
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              tags:
                - tag: component
                  value: power
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      // Паттерн для строки вида "/brand/n/power/m"
                      var pattern = /.*\/([^\/]+)\/(\d+)\/power\/(\d+)/;
                      var match = inputString.match(pattern);
                  
                      if (match) {
                          var brand = match[1].toLowerCase(); // Получаем бренд и приводим к нижнему регистру
                          var n = parseInt(match[2], 10);
                          var m = parseInt(match[3], 10);
                          var newN = n + 1;
                  
                          // Формирование строки в зависимости от условий
                          if (brand === "amd") {
                              brand = "AMD";
                          } else if (brand.startsWith("gpu-")) {
                              brand = brand.slice(4); // Убираем "gpu-" из начала строки
                              brand = brand.charAt(0).toUpperCase() + brand.slice(1); // Первая буква в верхнем регистре
                          } else {
                              brand = brand.charAt(0).toUpperCase() + brand.slice(1);
                          }
                  
                          // Формирование и возврат результата
                          if (m === 0) {
                              return brand + " CPU №" + newN;
                          } else {
                              return brand + " CPU №" + newN + " Core №" + m;
                          }
                      }
                  
                      // Возвращаем исходную строку, если никаких замен не произошло
                      return inputString;
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#SENSOR_NAME}": replaceString(sensor.Identifier),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 78e4a0f58f094d4b94258832f027e641
          name: 'Обнаружение модулей RAM'
          type: DEPENDENT
          key: ram_discovery
          delay: '0'
          item_prototypes:
            - uuid: aff5edea02404e5db9d8d05951dbd32d
              name: 'Модуль RAM {#RAM_PART_NUMBER}: атрибуты'
              type: DEPENDENT
              key: 'ram_attributes["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Attributes.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 9dc0ca0e174f48c88dd74394025aa0de
              name: 'Модуль RAM {#RAM_PART_NUMBER}: слот'
              type: DEPENDENT
              key: 'ram_bank_label["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].BankLabel.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 1dcf2eafc7cf43a5836a222ad369c312
              name: 'Модуль RAM {#RAM_PART_NUMBER}: объём'
              type: DEPENDENT
              key: 'ram_capacity["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Capacity.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 2f2e45b9add746358f921b7d55411c1f
              name: 'Модуль RAM {#RAM_PART_NUMBER}: частота'
              type: DEPENDENT
              key: 'ram_configured_clock_speed["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].ConfiguredClockSpeed.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: e3a20f0a607e41918a7b2293fd7221a5
              name: 'Модуль RAM {#RAM_PART_NUMBER}: напряжение'
              type: DEPENDENT
              key: 'ram_configured_voltage["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: V
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].ConfiguredVoltage.first()'
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 14c4c53a2cc6484abff2d829ec94b290
              name: 'Модуль RAM {#RAM_PART_NUMBER}: форм-фактор памяти'
              type: DEPENDENT
              key: 'ram_form_factor["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].FormFactor.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: afa81e63b0d247158a9ad888237b98bb
              name: 'Модуль RAM {#RAM_PART_NUMBER}: канал'
              type: DEPENDENT
              key: 'ram_locator["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].DeviceLocator.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 14d7613aedf44df7958b6509bf046a57
              name: 'Модуль RAM {#RAM_PART_NUMBER}: производитель'
              type: DEPENDENT
              key: 'ram_manufacturer["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Manufacturer.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 10d41d5a9a944e07b1debd9d8c6745b6
              name: 'Модуль RAM {#RAM_PART_NUMBER}: тип памяти SMBIOS'
              type: DEPENDENT
              key: 'ram_SMBIOS_type["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].SMBIOSMemoryType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 9a2eb0813ccd4c02b121af64562f4d86
              name: 'Модуль RAM {#RAM_PART_NUMBER}: скорость'
              type: DEPENDENT
              key: 'ram_speed["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: Hz
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].Speed.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
            - uuid: 072794419c8f429e91cccf0f582c7c0d
              name: 'Модуль RAM {#RAM_PART_NUMBER}: тип памяти'
              type: DEPENDENT
              key: 'ram_type["{#RAM_SERIAL_NUMBER}"]'
              delay: '0'
              history: 1d
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.SerialNumber == "{#RAM_SERIAL_NUMBER}")].MemoryType.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
          master_item:
            key: 'wmi.getall[root\cimv2,"select Attributes,BankLabel,Capacity,ConfiguredClockSpeed,ConfiguredVoltage,DeviceLocator,FormFactor,Manufacturer,MemoryType,PartNumber,SerialNumber,SMBIOSMemoryType,Speed from Win32_PhysicalMemory"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(ram){
                  	return {
                                  "{#RAM_PART_NUMBER}": ram.PartNumber.trim(),
                                  "{#RAM_SERIAL_NUMBER}": ram.SerialNumber
                  	}})
                  return JSON.stringify({"data": output})
        - uuid: 156e29e6194d48de81d94f2fe83b23da
          name: 'Windows services discovery'
          key: service.discovery
          delay: 1h
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#SERVICE.NAME}'
                value: '{$SERVICE.NAME.MATCHES}'
                formulaid: A
              - macro: '{#SERVICE.NAME}'
                value: '{$SERVICE.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#SERVICE.STARTUPNAME}'
                value: '{$SERVICE.STARTUPNAME.MATCHES}'
                formulaid: C
              - macro: '{#SERVICE.STARTUPNAME}'
                value: '{$SERVICE.STARTUPNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
          description: 'Used for the discovery of Windows services of different types as defined in the template''s macros.'
          item_prototypes:
            - uuid: 5893e3f8f06d455a8bd0a9af1d24e302
              name: 'State of service "{#SERVICE.NAME}" ({#SERVICE.DISPLAYNAME})'
              key: 'service.info["{#SERVICE.NAME}",state]'
              history: 7d
              tags:
                - tag: component
                  value: system
                - tag: name
                  value: '{#SERVICE.DISPLAYNAME}'
                - tag: service
                  value: '{#SERVICE.NAME}'
              trigger_prototypes:
                - uuid: 584064b7107f4b05a6bfb6a64d205f82
                  expression: 'min(/Windows PC by WMI/service.info["{#SERVICE.NAME}",state],#3)<>0'
                  name: '"{#SERVICE.NAME}" ({#SERVICE.DISPLAYNAME}) is not running'
                  event_name: '"{#SERVICE.NAME}" ({#SERVICE.DISPLAYNAME}) is not running (startup type {#SERVICE.STARTUPNAME})'
                  priority: AVERAGE
                  description: 'The service has a state other than "Running" for the last three times.'
                  tags:
                    - tag: scope
                      value: notice
        - uuid: e559070269bb48179074d071db95b55e
          name: 'SmallData sensors discovery'
          type: DEPENDENT
          key: smalldata.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSOR_NAME}'
                value: 'GPU Memory Total'
                formulaid: A
              - macro: '{#SENSOR_NAME}'
                value: 'GPU Memory Used'
                formulaid: B
              - macro: '{#SENSOR_TYPE}'
                value: SmallData
                formulaid: C
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: 884e58170b73410493de38542225d489
              name: '{#DEVICE} {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'small_data[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
                - type: MULTIPLIER
                  parameters:
                    - '1048576'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function containsDisks(str) {
                      const disks = ['hdd', 'ssd', 'nvme'];
                      return disks.some(function(disk) {
                          return str.includes(disk);
                      });
                  }
                  
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                          else{
                              return "GPU " + gpuBrand + " №" + incrementedNumber;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[1]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU " + cpuBrand + " №" + incrementedNumber;
                      }
                      else if (containsDisks(target)) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск №" + incrementedNumber + " " + uppercasedTarget;
                      }  
                      
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(small_data){
                      return {
                          "{#SENSOR_ID}": small_data.Identifier,
                          "{#DEVICE}": replaceString(small_data.Identifier),
                          "{#SENSOR_NAME}": small_data.Name,
                          "{#SENSOR_TYPE}": small_data.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 681557b6ab614ffd9594e4725c7335f5
          name: 'Датчики температуры'
          type: DEPENDENT
          key: temperatures_discovery
          delay: '0'
          status: DISABLED
          filter:
            evaltype: AND
            conditions:
              - macro: '{#DEVICE}'
                value: CPU
                operator: NOT_MATCHES_REGEX
                formulaid: A
              - macro: '{#DEVICE}'
                value: GPU
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#DEVICE}'
                value: HDD
                operator: NOT_MATCHES_REGEX
                formulaid: C
              - macro: '{#DEVICE}'
                value: LPC
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#DEVICE}'
                value: NVME
                operator: NOT_MATCHES_REGEX
                formulaid: E
              - macro: '{#DEVICE}'
                value: SSD
                operator: NOT_MATCHES_REGEX
                formulaid: F
              - macro: '{#SENSOR_TYPE}'
                value: Temperature
                formulaid: G
          lifetime: 30d
          item_prototypes:
            - uuid: 04665250ef734341bfce0e983a34e92d
              name: '{#DEVICE}: {#SENSOR_NAME}'
              type: DEPENDENT
              key: 'temperature[{#SENSOR_ID}]'
              delay: '0'
              history: 1d
              value_type: FLOAT
              trends: 1w
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.Identifier == "{#SENSOR_ID}")].Value.first()'
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  function replaceString(inputString) {
                      const parts = inputString.split('/');
                      const number = parseInt(parts[2], 10);
                      const incrementedNumber = number + 1;
                      const target = parts[1];
                      if (target.includes("gpu")) {
                          var gpuBrand = target.split('-')[1]
                          if (gpuBrand.toLowerCase() === "amd") {
                              gpuBrand = gpuBrand.toUpperCase();
                          } else {
                              gpuBrand = gpuBrand.charAt(0).toUpperCase() + gpuBrand.slice(1);
                          }
                          if (parts[4] === "2"){
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                          else{
                              return "GPU" + " #" + incrementedNumber + " - " + gpuBrand;
                          }
                      }
                      else if (target.includes("cpu")) {
                          var cpuBrand = target.split('cpu')[0]
                          if (cpuBrand.toLowerCase() === "amd") {
                              cpuBrand = cpuBrand.toUpperCase();
                          } else {
                              cpuBrand = cpuBrand.charAt(0).toUpperCase() + cpuBrand.slice(1);
                          }
                          return "CPU" + " #" + incrementedNumber + " - " + cpuBrand;
                      }
                      else if (target.includes("hdd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget;
                      }  
                      else if (target.includes("ssd")) {
                          const uppercasedTarget = target.toUpperCase();
                          return "Диск #" + incrementedNumber + " - SATA " + uppercasedTarget;
                      }
                      else if (target.includes("nvme")) {
                          const uppercasedExceptLast = target.slice(0, -1).toUpperCase();
                          const lastChar = target.slice(-1);
                          const uppercasedTarget = uppercasedExceptLast + lastChar;
                          return "Диск #" + incrementedNumber + " - " + uppercasedTarget + " SSD";
                      }
                      else  if (target.includes("lpc")){
                          const number = parseInt(parts[5], 10);
                          const incrementedNumber = number + 1;
                          return parts[1].toUpperCase() + " " + parts[2].toUpperCase();
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  function replaceName(inputString) {
                      if (inputString.match(/CPU Core #(\d+) Distance to TjMax/)) {
                          return "Distance to TjMax";
                      }
                      if (inputString.includes("CPU Core")) {
                           return inputString.split("CPU")[1] + " Temperature";
                      }
                      else if (inputString.includes("GPU")) {
                           return inputString.split('GPU')[1] + " Temperature";
                      }
                      else if (inputString.includes("CPU")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("Core")) {
                           return inputString + " Temperature";
                      }
                      else if (inputString.includes("(Tdie)")) {
                           return inputString + " Temperature";
                      }
                      else {
                          return inputString;
                      }
                  }
                  
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSOR_ID}": sensor.Identifier,
                          "{#DEVICE}": replaceString(sensor.Identifier),
                          "{#SENSOR_NAME}": replaceName(sensor.Name),
                          "{#SENSOR_TYPE}": sensor.SensorType
                      }})
                  return JSON.stringify({"data": output})
        - uuid: 856e1e97bc004c0db6be2f7508881cdd
          name: 'Mounted filesystem discovery'
          type: DEPENDENT
          key: vfs.fs.dependent.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#FSDRIVETYPE}'
                value: '{$VFS.FS.FSDRIVETYPE.MATCHES}'
                formulaid: A
              - macro: '{#FSDRIVETYPE}'
                value: '{$VFS.FS.FSDRIVETYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#FSNAME}'
                value: '{$VFS.FS.FSNAME.MATCHES}'
                formulaid: C
              - macro: '{#FSNAME}'
                value: '{$VFS.FS.FSNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#FSTYPE}'
                value: '{$VFS.FS.FSTYPE.MATCHES}'
                formulaid: E
              - macro: '{#FSTYPE}'
                value: '{$VFS.FS.FSTYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: F
          description: 'Discovery of filesystems of different types.'
          item_prototypes:
            - uuid: b1d30cc8bb9e4c9bb82b6c0bdb8aa443
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Available'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},free]'
              delay: '0'
              history: 7d
              status: DISABLED
              discover: NO_DISCOVER
              units: B
              description: 'Available storage space expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.free
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
            - uuid: 2c02acb0232344f4beb1c607648ddd85
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Used, in %'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},pused]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '%'
              description: 'Calculated as the percentage of currently used space compared to the maximum available space.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.pused
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
              trigger_prototypes:
                - uuid: 74e30e0563664dec92501a27419b7e7a
                  expression: 'min(/Windows PC by WMI/vfs.fs.dependent.size[{#FSNAME},pused],5m)>{$VFS.FS.PUSED.MAX.CRIT:"{#FSLABEL}({#FSNAME})"}'
                  name: 'FS [{#FSLABEL}({#FSNAME})]: Space is critically low'
                  event_name: 'FS [{#FSLABEL}({#FSNAME})]: Space is critically low (used > {$VFS.FS.PUSED.MAX.CRIT:"{#FSLABEL}({#FSNAME})"}%, total {{?last(//vfs.fs.dependent.size[{#FSNAME},total])/1024/1024/1024}.fmtnum(1)}GB)'
                  opdata: 'Space used: {{ITEM.LASTVALUE1}.fmtnum(1)}%'
                  priority: AVERAGE
                  description: |
                    The volume's space usage exceeds the `{$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}%` limit.
                    The trigger expression is based on the current used and maximum available spaces.
                    Event name represents the total volume space, which can differ from the maximum available space, depending on the filesystem type.
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
                    - tag: scope
                      value: capacity
                - uuid: 532b09690eaf4f11b90b80398a8bcfd9
                  expression: 'min(/Windows PC by WMI/vfs.fs.dependent.size[{#FSNAME},pused],5m)>{$VFS.FS.PUSED.MAX.WARN:"{#FSLABEL}({#FSNAME})"}'
                  name: 'FS [{#FSLABEL}({#FSNAME})]: Space is low'
                  event_name: 'FS [{#FSLABEL}({#FSNAME})]: Space is low (used > {$VFS.FS.PUSED.MAX.WARN:"{#FSLABEL}({#FSNAME})"}%, total {{?last(//vfs.fs.dependent.size[{#FSNAME},total])/1024/1024/1024}.fmtnum(1)}GB)'
                  opdata: 'Space used: {{ITEM.LASTVALUE1}.fmtnum(1)}%'
                  priority: WARNING
                  description: |
                    The volume's space usage exceeds the `{$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}%` limit.
                    The trigger expression is based on the current used and maximum available spaces.
                    Event name represents the total volume space, which can differ from the maximum available space, depending on the filesystem type.
                  manual_close: 'YES'
                  dependencies:
                    - name: 'FS [{#FSLABEL}({#FSNAME})]: Space is critically low'
                      expression: 'min(/Windows PC by WMI/vfs.fs.dependent.size[{#FSNAME},pused],5m)>{$VFS.FS.PUSED.MAX.CRIT:"{#FSLABEL}({#FSNAME})"}'
                  tags:
                    - tag: scope
                      value: availability
                    - tag: scope
                      value: capacity
            - uuid: c44c55efbff845fc8744068e05d569ed
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Total'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},total]'
              delay: '0'
              history: 7d
              units: B
              description: 'Total space expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.total
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
            - uuid: f2c5f1696c73487f9498448d96631928
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space: Used'
              type: DEPENDENT
              key: 'vfs.fs.dependent.size[{#FSNAME},used]'
              delay: '0'
              history: 7d
              units: B
              description: 'Used storage expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.bytes.used
              master_item:
                key: 'vfs.fs.dependent[{#FSNAME},data]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
            - uuid: f8d7e1477ac9465e867743e3e569cd9d
              name: 'FS [{#FSLABEL}({#FSNAME})]: Get data'
              type: DEPENDENT
              key: 'vfs.fs.dependent[{#FSNAME},data]'
              delay: '0'
              history: '0'
              value_type: TEXT
              trends: '0'
              description: 'Intermediate data of `{#FSNAME}` filesystem.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.fsname==''{#FSNAME}'')].first()'
              master_item:
                key: vfs.fs.get
              tags:
                - tag: component
                  value: raw
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: fstype
                  value: '{#FSTYPE}'
          graph_prototypes:
            - uuid: 0c36397778fb4c09a4978d5b802eda77
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space usage graph, in %'
              width: '600'
              height: '340'
              ymin_type_1: FIXED
              ymax_type_1: FIXED
              graph_items:
                - drawtype: FILLED_REGION
                  color: F63100
                  calc_fnc: LAST
                  item:
                    host: 'Windows PC by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},pused]'
            - uuid: 5981f58cbae0442a8e070aa8ca0d9cc7
              name: 'FS [{#FSLABEL}({#FSNAME})]: Space utilization chart'
              width: '600'
              height: '340'
              type: PIE
              show_3d: 'YES'
              graph_items:
                - color: '787878'
                  calc_fnc: LAST
                  type: GRAPH_SUM
                  item:
                    host: 'Windows PC by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},total]'
                - sortorder: '1'
                  color: F63100
                  calc_fnc: LAST
                  item:
                    host: 'Windows PC by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},used]'
                - sortorder: '2'
                  color: 199C09
                  calc_fnc: LAST
                  item:
                    host: 'Windows PC by WMI'
                    key: 'vfs.fs.dependent.size[{#FSNAME},free]'
          master_item:
            key: vfs.fs.get
          lld_macro_paths:
            - lld_macro: '{#FSDRIVETYPE}'
              path: $.fsdrivetype
            - lld_macro: '{#FSLABEL}'
              path: $.fslabel
            - lld_macro: '{#FSNAME}'
              path: $.fsname
            - lld_macro: '{#FSTYPE}'
              path: $.fstype
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var filesystems = JSON.parse(value);
                  
                  result = filesystems.map(function (filesystem) {
                  	return {
                  		'fsname': filesystem.fsname,
                  		'fstype': filesystem.fstype,
                  		'fslabel': filesystem.fslabel,
                  		'fsdrivetype': filesystem.fsdrivetype
                  	};
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 153cddcdd6d64d71aa1e24fb219a81e4
          name: 'Voltage sensors discovery'
          type: DEPENDENT
          key: voltage.sensors.discovery
          delay: '0'
          status: DISABLED
          filter:
            conditions:
              - macro: '{#SENSORTYPE}'
                value: Voltage
                formulaid: A
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: 5bf731720b7c44e68b5de063cfe77633
              name: '{#SENSORNAME} ({#SENSORPARENT}): {#SENSORTYPE}'
              type: DEPENDENT
              key: 'voltage.sensor["{#SENSORPATH}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: V
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.InstanceId == "{#SENSORID}")].Value.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
              tags:
                - tag: component
                  value: voltage
                - tag: sensor
                  value: '{#SENSORPARENT}'
          master_item:
            key: 'wmi.getall[root/LibreHardwareMonitor,select * from Sensor]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  output = JSON.parse(value).map(function(sensor){
                      return {
                          "{#SENSORID}": sensor.InstanceId,
                          "{#SENSORPATH}": sensor.Identifier,
                          "{#SENSORNAME}": sensor.Name,
                          "{#SENSORTYPE}": sensor.SensorType,
                          "{#SENSORPARENT}": sensor.Parent
                      }})
                  return JSON.stringify({"data": output})
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
  triggers:
    - uuid: 17aabccadfde4c5781826301765fb13d
      expression: 'max(/Windows PC by WMI/system.swap.pfree,5m)<{$SWAP.PFREE.MIN.WARN} and last(/Windows PC by WMI/system.swap.size[,total])>0'
      name: 'High swap space usage'
      event_name: 'High swap space usage (less than {$SWAP.PFREE.MIN.WARN}% free)'
      opdata: 'Free: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}'
      priority: WARNING
      description: 'This trigger is ignored, if there is no swap configured'
      dependencies:
        - name: 'High memory utilization'
          expression: 'min(/Windows PC by WMI/vm.memory.util,5m)>{$MEMORY.UTIL.MAX}'
      tags:
        - tag: scope
          value: performance
  graphs:
    - uuid: 98dd9ad461944ab1bfe3186e5634d864
      name: 'Windows: CPU jumps'
      graph_items:
        - color: 199C0D
          item:
            host: 'Windows PC by WMI'
            key: 'perf_counter_en["\System\Context Switches/sec"]'
        - sortorder: '1'
          color: F63100
          item:
            host: 'Windows PC by WMI'
            key: 'perf_counter_en["\Processor Information(_total)\% Interrupt Time"]'
    - uuid: 8297d86891bd481eb714a1924b8dc527
      name: 'Windows: CPU usage'
      type: STACKED
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        - color: 199C0D
          item:
            host: 'Windows PC by WMI'
            key: 'perf_counter_en["\Processor Information(_total)\% User Time"]'
        - sortorder: '1'
          color: F63100
          item:
            host: 'Windows PC by WMI'
            key: 'perf_counter_en["\Processor Information(_total)\% Privileged Time"]'
    - uuid: 774e13529ae3425c80f0f63ee4657378
      name: 'Windows: CPU utilization'
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'Windows PC by WMI'
            key: system.cpu.util
    - uuid: 703b1902bf85436b960b0cc0fd54ced6
      name: 'Windows: Memory utilization'
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'Windows PC by WMI'
            key: vm.memory.util
    - uuid: fa382e4ba01a44859dc2d912dd096be9
      name: 'Windows: Swap usage'
      graph_items:
        - color: 199C0D
          item:
            host: 'Windows PC by WMI'
            key: system.swap.free
        - sortorder: '1'
          color: F63100
          item:
            host: 'Windows PC by WMI'
            key: 'system.swap.size[,total]'
